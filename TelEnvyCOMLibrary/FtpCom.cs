// ***********************************************************************
// Assembly         : TelEnvyCOMLibrary
// Author           : Timothy Peer
// Created          : 05-27-2018
//
// Last Modified By : Timothy Peer
// Last Modified On : 05-27-2018
// ***********************************************************************
// <copyright file="FtpCom.cs" company="eNVy Systems, Inc.">
//     Copyright ©  2018
// </copyright>
// <summary></summary>
// ***********************************************************************
using nsoftware.IPWorks;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using TelEnvyCOMLibrary.EventArgs;
using TelEnvyCOMLibrary.Handlers;
using TelEnvyXmlLib;
using TelEnvyXmlLib.Enums;
using TelEnvyXmlLib.Exceptions;
using TelEnvyXmlLib.ExtensionMethods;
using TelEnvyXmlLib.Helper;


namespace TelEnvyCOMLibrary
{
    /// <summary>
    /// Class FtpCom.
    /// </summary>
    /// <seealso cref="System.ComponentModel.Component" />
    /// <seealso cref="System.IDisposable" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for FtpCom
    public partial class FtpCom : Component, IDisposable
    {
        /// <summary>
        /// 
        /// </summary>
        public string NLogModuleName { get; private set; }

        // Fields...
        /// <summary>
        /// 
        /// </summary>
        /// <param name="moduleName"></param>
        public void SetLogModuleName(string moduleName)
        {
            NLogModuleName = moduleName;
        }

        /// <summary>
        /// Gets the name of the log file.
        /// </summary>
        /// <value>The name of the log file.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LogFileName
        public string LogFileName { get; private set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FtpCom"/> class.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public FtpCom()
        {
            InitializeComponent();
            string runtimeLicense = ftp1.RuntimeLicense;

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FtpCom"/> class.
        /// </summary>
        /// <param name="container">The container.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public FtpCom(IContainer container)
        {
            container.Add(this);

            InitializeComponent();
            string runtimeLicense = ftp1.RuntimeLicense;
            ftp1.RuntimeLicense = "31504E4241414E58524634574A31303835380000000000000000000000000000000000000000000041364738424650540000564E30473250594D574D344D0000";

        }


        #region ConnectionStatus
        /// <summary>
        /// The connection status event handlers
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _ConnectionStatusEventHandlers
        private EventHandlerList _ConnectionStatusEventHandlers = new EventHandlerList();

        /// <summary>
        /// The connection status key
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _ConnectionStatusKey
        private static readonly object _ConnectionStatusKey = new object();
        /// <summary>
        /// Occurs when [connection status].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ConnectionStatus
        public event FtpConnectionStatusEventHandler ConnectionStatus
        {
            add
            {
                ftp1.OnConnectionStatus += Ftp1_OnConnectionStatus;
                _ConnectionStatusEventHandlers.AddHandler(_ConnectionStatusKey, value);
            }
            remove
            {
                ftp1.OnConnectionStatus -= Ftp1_OnConnectionStatus;
                _ConnectionStatusEventHandlers.RemoveHandler(_ConnectionStatusKey, value);
            }
        }



        /// <summary>
        /// Handles the OnConnectionStatus event of the Ftp1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="FtpConnectionStatusEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Ftp1_OnConnectionStatus
        private void Ftp1_OnConnectionStatus(object sender, FtpConnectionStatusEventArgs e)
        {
            FtpConnectionStatusCOMEventArgs args = new FtpConnectionStatusCOMEventArgs(e.ConnectionEvent, e.Description, e.StatusCode);

            OnConnectionStatus(sender, args);
        }

        /// <summary>
        /// Handles the <see cref="E:ConnectionStatus" /> event.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="FtpConnectionStatusCOMEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for OnConnectionStatus
        public void OnConnectionStatus(object sender, FtpConnectionStatusCOMEventArgs e)
        {
            EventHandler handler = _ConnectionStatusEventHandlers[_ConnectionStatusKey] as EventHandler;

            if (handler != null)
            {
                Delegate[] invocationList = handler.GetInvocationList();
                foreach (Delegate listener in invocationList)
                {
                    listener.DynamicInvoke(sender, e);
                }
            }
        }
        #endregion

        #region EndTransfer
        // this.ftp1.OnEndTransfer += new nsoftware.IPWorks.Ftp.OnEndTransferHandler(this.ftp1_OnEndTransfer);

        /// <summary>
        /// The end transfer event handlers
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _EndTransferEventHandlers
        private EventHandlerList _EndTransferEventHandlers = new EventHandlerList();

        /// <summary>
        /// The end transfer key
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _EndTransferKey
        private static readonly object _EndTransferKey = new object();
        /// <summary>
        /// Occurs when [end transfer].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for EndTransfer
        public event FtpEndTransferHandler EndTransfer
        {
            add
            {
                ftp1.OnEndTransfer += ftp1_OnEndTransfer;
                _EndTransferEventHandlers.AddHandler(_EndTransferKey, value);
            }
            remove
            {
                ftp1.OnEndTransfer -= ftp1_OnEndTransfer;
                _EndTransferEventHandlers.RemoveHandler(_EndTransferKey, value);
            }
        }

        /// <summary>
        /// Handles the <see cref="E:EndTransfer" /> event.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="FtpEndTransferCOMEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for OnEndTransfer
        internal void OnEndTransfer(object sender, FtpEndTransferCOMEventArgs e)
        {
            EventHandler handler = _EndTransferEventHandlers[_EndTransferKey] as EventHandler;
            if (handler != null)
            {
                Delegate[] invocationList = handler.GetInvocationList();
                foreach (Delegate listener in invocationList)
                {
                    listener.DynamicInvoke(sender, e);
                }
            }
        }
        /// <summary>
        /// Handles the OnEndTransfer event of the ftp1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="FtpEndTransferEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ftp1_OnEndTransfer
        private void ftp1_OnEndTransfer(object sender, FtpEndTransferEventArgs e)
        {
            FtpEndTransferCOMEventArgs arg = new FtpEndTransferCOMEventArgs(e.Direction);
            OnEndTransfer(sender, arg);
        }
        #endregion

        #region DirList
        //    this.ftp1.OnDirList += new nsoftware.IPWorks.Ftp.OnDirListHandler(this.ftp1_OnDirList);
        /// <summary>
        /// The dir list event event handlers
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _DirListEventEventHandlers
        private EventHandlerList _DirListEventEventHandlers = new EventHandlerList();

        /// <summary>
        /// The dir list key
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _DirListKey
        private static readonly object _DirListKey = new object();
        /// <summary>
        /// Occurs when [dir list].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DirList
        public event EventHandler DirList
        {
            add
            {
                ftp1.OnDirList += ftp1_OnDirList;
                _DirListEventEventHandlers.AddHandler(_DirListKey, value);
            }
            remove
            {
                ftp1.OnDirList -= ftp1_OnDirList;
                _DirListEventEventHandlers.RemoveHandler(_DirListKey, value);
            }
        }

        /// <summary>
        /// Handles the <see cref="E:DirList" /> event.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="FtpDirListEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for OnDirList
        internal void OnDirList(object sender, FtpDirListEventArgs e)
        {
            EventHandler handler = _DirListEventEventHandlers[_DirListKey] as EventHandler;
            if (handler != null)
            {
                Delegate[] invocationList = handler.GetInvocationList();
                foreach (Delegate listener in invocationList)
                {
                    listener.DynamicInvoke(sender, e);
                }
            }
        }



        /// <summary>
        /// Handles the OnDirList event of the ftp1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="FtpDirListEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ftp1_OnDirList
        private void ftp1_OnDirList(object sender, FtpDirListEventArgs e)
        {
            OnDirList(sender, e);
        }
        #endregion

        #region FtpError
        //this.ftp1.OnError += new nsoftware.IPWorks.Ftp.OnErrorHandler(this.ftp1_OnError);
        /// <summary>
        /// The FTP error event event handlers
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _FtpErrorEventEventHandlers
        private EventHandlerList _FtpErrorEventEventHandlers = new EventHandlerList();

        /// <summary>
        /// The FTP error key
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _FtpErrorKey
        private static readonly object _FtpErrorKey = new object();
        /// <summary>
        /// Occurs when [FTP error].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for FtpError
        public event FtpErrorEventHandler FtpError
        {
            add
            {
                ftp1.OnError += ftp1_OnError;
                _FtpErrorEventEventHandlers.AddHandler(_FtpErrorKey, value);
            }
            remove
            {
                ftp1.OnError -= ftp1_OnError;
                _FtpErrorEventEventHandlers.RemoveHandler(_FtpErrorKey, value);
            }
        }

        /// <summary>
        /// Handles the <see cref="E:FtpError" /> event.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="FtpErrorCOMEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for OnFtpError
        public void OnFtpError(object sender, FtpErrorCOMEventArgs e)
        {
            EventHandler handler = _FtpErrorEventEventHandlers[_FtpErrorKey] as EventHandler;
            if (handler != null)
            {
                Delegate[] invocationList = handler.GetInvocationList();
                foreach (Delegate listener in invocationList)
                {
                    listener.DynamicInvoke(sender, e);
                }
            }

        }

        /// <summary>
        /// Handles the OnError event of the ftp1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="FtpErrorEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ftp1_OnError
        private void ftp1_OnError(object sender, FtpErrorEventArgs e)
        {
            FtpErrorCOMEventArgs arg = new FtpErrorCOMEventArgs(e.Description, e.ErrorCode);
            OnFtpError(sender, arg);
        }
        #endregion

        #region OnPiTrail
        //            this.ftp1.OnPITrail += new nsoftware.IPWorks.Ftp.OnPITrailHandler(this.ftp1_OnPITrail);

        /// <summary>
        /// The FTP pi trail event handlers
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _FtpPITrailEventHandlers
        private EventHandlerList _FtpPITrailEventHandlers = new EventHandlerList();

        /// <summary>
        /// The on pi trail key
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _OnPiTrailKey
        private static readonly object _OnPiTrailKey = new object();
        /// <summary>
        /// Occurs when [pi trail].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for PiTrail
        public event FtpPITrailEventHandler PiTrail
        {
            add
            {
                ftp1.OnPITrail += Ftp1_OnPITrail;
                _FtpPITrailEventHandlers.AddHandler(_OnPiTrailKey, value);
            }
            remove
            {
                ftp1.OnPITrail -= Ftp1_OnPITrail;
                _FtpPITrailEventHandlers.RemoveHandler(_OnPiTrailKey, value);
            }
        }

        /// <summary>
        /// Handles the OnPITrail event of the Ftp1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="FtpPITrailEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Ftp1_OnPITrail
        private void Ftp1_OnPITrail(object sender, FtpPITrailEventArgs e)
        {
            FtpPITrailCOMEventArgs arg = new FtpPITrailCOMEventArgs(e.Direction, e.Message);
            OnPiTrail(sender, arg);
        }

        /// <summary>
        /// Handles the <see cref="E:PiTrail" /> event.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="FtpPITrailCOMEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for OnPiTrail
        internal void OnPiTrail(object sender, FtpPITrailCOMEventArgs e)
        {
            EventHandler handler = _FtpPITrailEventHandlers[_OnPiTrailKey] as EventHandler;
            if (handler != null)
            {
                Delegate[] invocationList = handler.GetInvocationList();
                foreach (Delegate listener in invocationList)
                {
                    listener.DynamicInvoke(sender, e);
                }
            }

        }


        #endregion

        #region StartTransfer

        //             this.ftp1.OnStartTransfer += new nsoftware.IPWorks.Ftp.OnStartTransferHandler(this.ftp1_OnStartTransfer);
        /// <summary>
        /// The e FTP start transfer event handlers
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _EFtpStartTransferEventHandlers
        private EventHandlerList _EFtpStartTransferEventHandlers = new EventHandlerList();

        /// <summary>
        /// The FTP start transfer
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _FtpStartTransfer
        private static readonly object _FtpStartTransfer = new object();
        /// <summary>
        /// Occurs when [FTP start transfer].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for FtpStartTransfer
        public event FtpStartTransferEventHandler FtpStartTransfer
        {
            add
            {
                ftp1.OnStartTransfer += ftp1_OnStartTransfer;
                _EFtpStartTransferEventHandlers.AddHandler(_FtpStartTransfer, value);
            }
            remove
            {
                ftp1.OnStartTransfer -= ftp1_OnStartTransfer;
                _EFtpStartTransferEventHandlers.RemoveHandler(_FtpStartTransfer, value);
            }
        }

        /// <summary>
        /// Handles the <see cref="E:FtpStartTransfer" /> event.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="FtpStartTransferCOMEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for OnFtpStartTransfer
        public void OnFtpStartTransfer(object sender, FtpStartTransferCOMEventArgs e)
        {
            EventHandler handler = _EFtpStartTransferEventHandlers[_FtpStartTransfer] as EventHandler;
            if (handler != null)
            {
                Delegate[] invocationList = handler.GetInvocationList();
                foreach (Delegate listener in invocationList)
                {
                    listener.DynamicInvoke(sender, e);
                }
            }
        }

        /// <summary>
        /// Handles the OnStartTransfer event of the ftp1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="FtpStartTransferEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ftp1_OnStartTransfer
        private void ftp1_OnStartTransfer(object sender, FtpStartTransferEventArgs e)
        {
            FtpStartTransferCOMEventArgs arg = new FtpStartTransferCOMEventArgs(e.Direction);
            OnFtpStartTransfer(sender, arg);
        }
        #endregion              

        #region FtpTransfer
        /// <summary>
        /// The FTP transfer event handlers
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _FtpTransferEventHandlers
        private EventHandlerList _FtpTransferEventHandlers = new EventHandlerList();
        private string guidString;
        private long byteSent;

        /// <summary>
        /// The transfer key
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _TransferKey
        private static readonly object _TransferKey = new object();
        /// <summary>
        /// Occurs when [transfer].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Transfer
        public event FtpTransferEventHandler Transfer
        {
            add
            {
                ftp1.OnTransfer += ftp1_OnTransfer;
                _FtpTransferEventHandlers.AddHandler(_TransferKey, value);
            }
            remove
            {
                ftp1.OnTransfer -= ftp1_OnTransfer;
                _FtpTransferEventHandlers.RemoveHandler(_TransferKey, value);
            }
        }

        /// <summary>
        /// Handles the <see cref="E:Transfer" /> event.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="FtpTransferCOMEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for OnTransfer
        internal void OnTransfer(object sender, FtpTransferCOMEventArgs e)
        {
            EventHandler handler = _FtpTransferEventHandlers[_TransferKey] as EventHandler;
            if (handler != null)
            {
                Delegate[] invocationList = handler.GetInvocationList();
                foreach (Delegate listener in invocationList)
                {
                    listener.DynamicInvoke(sender, e);
                }
            }
        }


        /// <summary>
        /// Handles the OnTransfer event of the ftp1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="FtpTransferEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ftp1_OnTransfer
        private void ftp1_OnTransfer(object sender, FtpTransferEventArgs e)
        {
            FtpTransferCOMEventArgs arg = new FtpTransferCOMEventArgs(e.BytesTransferred, e.Direction, e.PercentDone, e.Text, e.TextB);
            OnTransfer(sender, arg);
        }
        #endregion
        #region RegionName
        /// <summary>
        /// Sets the local host.
        /// </summary>
        /// <param name="hostName">Name of the host.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for setLocalHost
        public void setLocalHost(string hostName)
        {
            if (ftp1 == null) ftp1 = new Ftp(this.Container);

            ftp1.LocalHost = hostName;
            StaticLogger.LogInfo("PZ_API_53", string.Format("Local Host: {0}", hostName));



        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="guidStr"></param>
        public void setTransactionId(string guidStr)
        {
            guidString = guidStr;
        }
        /// <summary>
        /// Sets the local file.
        /// </summary>
        /// <param name="localFile">The local file.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for setLocalFile
        public void setLocalFile(string localFile)
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);
            ftp1.LocalFile = localFile;
            StaticLogger.LogInfo("PZ_API_53", string.Format("Local File: {0}", localFile));
        }
        /// <summary>
        /// Files the exists.
        /// </summary>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for FileExists
        public bool FileExists()
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);
            return ftp1.FileExists;
        }
        /// <summary>
        /// Sets the remote port.
        /// </summary>
        /// <param name="remotePort">The remote port.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for setRemotePort
        public void setRemotePort(int remotePort)
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);
            ftp1.RemotePort = remotePort;
            StaticLogger.LogInfo("PZ_API_53", string.Format("Remote Port: {0}", remotePort));
        }
        /// <summary>
        /// Sets the remote host.
        /// </summary>
        /// <param name="hostName">Name of the host.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for setRemoteHost
        public void setRemoteHost(string hostName)
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);


            ftp1.RemoteHost = hostName;


        }
        /// <summary>
        /// Logs the error.
        /// </summary>
        /// <param name="description">The description.</param>
        /// <param name="errorCode">The error code.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LogError
        public void LogError(string description, int errorCode)
        {


        }
        /// <summary>
        /// Sets the remote file.
        /// </summary>
        /// <param name="fileName">Name of the file.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for setRemoteFile
        public void setRemoteFile(string fileName)
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);


            ftp1.RemoteFile = fileName;
            StaticLogger.LogInfo("PZ_API_53", string.Format("RemoteFile: {0}", fileName));
        }
        /// <summary>
        /// Sets the remote file.
        /// </summary>
        /// <param name="fileInfo">The file information.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for setRemoteFile
        public void setRemoteFile(FileInfo fileInfo)
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);


            ftp1.RemoteFile = fileInfo.FullName;
            StaticLogger.LogInfo("PZ_API_53", string.Format("RemoteFile: {0}", fileInfo.FullName));
        }
        /// <summary>
        /// Remotes the path.
        /// </summary>
        /// <param name="directoryPath">The directory path.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for RemotePath
        public void RemotePath(string directoryPath)
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);

            ftp1.RemotePath = directoryPath;
            StaticLogger.LogInfo("PZ_API_53", string.Format("Directory Path: {0}", directoryPath));
        }
        /// <summary>
        /// Sets the time out.
        /// </summary>
        /// <param name="ftpTimeOut">The FTP time out.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for setTimeOut
        public void setTimeOut(int ftpTimeOut)
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);
            ftp1.Timeout = ftpTimeOut;
        }
        /// <summary>
        /// Sets the transfer mode.
        /// </summary>
        /// <param name="transferMode">The transfer mode.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for setTransferMode
        public void setTransferMode(TelEnvyXmlLib.Enums.FtpTransferModes transferMode = 0)
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);
            switch (transferMode)
            {
                case TelEnvyXmlLib.Enums.FtpTransferModes.tmDefault:
                    {

                        ftp1.TransferMode = nsoftware.IPWorks.FtpTransferModes.tmDefault;
                    }

                    break;
                case TelEnvyXmlLib.Enums.FtpTransferModes.tmASCII:
                    {
                        ftp1.TransferMode = nsoftware.IPWorks.FtpTransferModes.tmASCII;

                    }

                    break;
                case TelEnvyXmlLib.Enums.FtpTransferModes.tmBinary:
                    {
                        ftp1.TransferMode = nsoftware.IPWorks.FtpTransferModes.tmBinary;

                    }
                    break;
            }
        }
        /// <summary>
        /// Sets the user.
        /// </summary>
        /// <param name="loginUserName">Name of the login user.</param>
        /// <param name="loginPassword">The login password.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for setUser
        public void setUser(string loginUserName, string loginPassword)
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);
            ftp1.User = loginUserName;
            ftp1.Password = loginPassword;

            StaticLogger.LogInfo("PZ_API_53", string.Format("Username: {0} Password: {1}", loginUserName, loginPassword));

        }
        /// <summary>
        /// Sets the passive mode.
        /// </summary>
        /// <param name="bEnable">if set to <c>true</c> [b enable].</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for setPassiveMode
        public void setPassiveMode(bool bEnable = true)
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);
            ftp1.Passive = bEnable;
        }
        /// <summary>
        /// Sets the over write.
        /// </summary>
        /// <param name="bEnable">if set to <c>true</c> [b enable].</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for setOverWrite
        public void setOverWrite(bool bEnable = true)
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);
            ftp1.Overwrite = bEnable;
        }
        #endregion
        /// <summary>
        /// Determines whether [is FTP idle].
        /// </summary>
        /// <returns><c>true</c> if [is FTP idle]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for IsFtpIdle
        public bool IsFtpIdle()
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);
            return ftp1.Idle;
        }
        /// <summary>
        /// Gets the dir list.
        /// </summary>
        /// <returns>List&lt;DirEntryClass&gt;.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for getDirList
        public List<DirEntryClass> getDirList()
        {
            DirEntryList lst = ftp1.DirList;
            List<DirEntryClass> lstClass = new List<DirEntryClass>();
            foreach (DirEntry dirEntry in lst)
            {
                lstClass.Add(new DirEntryClass()
                {
                    Entry = dirEntry.Entry,
                    FileName = dirEntry.FileName,
                    FileSize = dirEntry.FileSize,
                    FileTime = dirEntry.FileTime,
                    IsDir = dirEntry.IsDir
                });
            }
            return lstClass;
        }
        /// <summary>
        /// Determines whether [is FTP connected].
        /// </summary>
        /// <returns><c>true</c> if [is FTP connected]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for IsFtpConnected
        public bool IsFtpConnected()
        {
            bool bConnected = false;
            if (ftp1 == null) ftp1 = new Ftp(Container);
            try
            {
                ftp1.RuntimeLicense = "31504E4241414E58524634574A31303835380000000000000000000000000000000000000000000041364738424650540000564E30473250594D574D344D0000";
                bConnected = ftp1.Connected;
                StaticLogger.LogInfo("PZ_API_53", string.Format("FTP Connection Status: {0}.", bConnected.ToString()));
            }
            catch (Exception ex)
            {
                StaticLogger.LogError("PZ_API_53", ex, string.Format("FTP Connection Error: {0}.", bConnected.ToString()));
            }

            return bConnected;
        }
        /// <summary>
        /// Lasts the reply.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LastReply
        public string LastReply()
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);
            ftp1.RuntimeLicense = "31504E4241414E58524634574A31303835380000000000000000000000000000000000000000000041364738424650540000564E30473250594D574D344D0000";
            return ftp1.LastReply;
        }
        /// <summary>
        /// Sets the start byte.
        /// </summary>
        /// <param name="startByte">The start byte.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for setStartByte
        public void setStartByte(string startByte)
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);
            ftp1.RuntimeLicense = "31504E4241414E58524634574A31303835380000000000000000000000000000000000000000000041364738424650540000564E30473250594D574D344D0000";
            ftp1.StartByte = startByte;
        }
        /// <summary>
        /// Aborts this instance.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Abort
        public void Abort()
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);
            ftp1.RuntimeLicense = "31504E4241414E58524634574A31303835380000000000000000000000000000000000000000000041364738424650540000564E30473250594D574D344D0000";
            ftp1.Abort();
        }
        /// <summary>
        /// 
        /// </summary>
        protected TimeSpan TransactionResponseTime { get; set; }
        /// <summary>
        /// Uploads this instance.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Upload
        public void Upload()
        {
            DateTime startTime = DateTime.UtcNow;
            DateTime endTime = DateTime.UtcNow;
            try
            {
                try
                {
                    if (ftp1 == null) ftp1 = new Ftp(Container);
                    ftp1.RuntimeLicense = "31504E4241414E58524634574A31303835380000000000000000000000000000000000000000000041364738424650540000564E30473250594D574D344D0000";
                    ftp1.OnTransfer += Ftp1_OnTransfer;
                    StaticLogger.LogInfo("PZ_API_53", string.Format("FTP Upload Initiated."));
                    ftp1.Upload();
                    StaticLogger.LogInfo("PZ_API_53", string.Format("FTP Upload Complete."));
                    string ffile = Path.GetFileNameWithoutExtension(ftp1.LocalFile);
                    string fDir = Path.GetDirectoryName(ftp1.LocalFile);

                    FileInfo fInfo = new FileInfo(ftp1.LocalFile);
                    StaticLogger.LogInfo("PZ_API_53", string.Format("FTP Create New File. {0}", fInfo.FullName));
                    fInfo.CopyTo(string.Format("{0}\\{1}_{2}.processed", fDir, ffile, guidString));
                    StaticLogger.LogInfo("PZ_API_53", string.Format("{0}\\{1}.processed", fDir, ffile));
                    fInfo.Delete();
                    StaticLogger.LogInfo("PZ_API_53", string.Format("Delete File: {0}", ffile));
                    endTime = DateTime.UtcNow;
                    TransactionResponseTime = endTime.Subtract(startTime);
                }
                catch (Exception ex)
                {
                    StaticLogger.LogError("PZ_API_53", ex, string.Format("An Exception occurred during UpLoad"));
                    string ffile = Path.GetFileNameWithoutExtension(ftp1.LocalFile);
                    string fDir = Path.GetDirectoryName(ftp1.LocalFile);
                    System.IO.FileInfo fInfo = new FileInfo(ftp1.LocalFile);
                    fInfo.CopyTo(string.Format("{0}\\{1}_{2}.err", fDir, ffile, guidString));
                    fInfo.Delete();
                    StaticLogger.LogError("PZ_API_53", ex, string.Format("Post Error File: {0}\\{1}.err", fDir, ffile));
                    StaticLogger.LogError("PZ_API_53", ex, string.Format("An Exception occurred during UpLoad clean-up {0}", ffile));
                }
                finally
                {
                    StaticLogger.LogInfo("PZ_API_53",
                               string.Format("FTP Response-Time: -- Bytes:{0} -- StartTime: {1} -- EndTime:{2} -- Elapsed Time:{3} (UTC Time)",
                                byteSent, startTime.ToString("MM/dd/yyyy HH:mm:ss"), endTime.ToString("MM/dd/yyyy HH:mm:ss"), TransactionResponseTime.ToReadableString()));
                }

            }
            catch (Exception ex)
            {
                StaticLogger.LogError("PZ_API_53", ex, string.Format("Second Pass: An Exception occurred during UpLoad"));
                throw new TelUnclassifiedException(string.Format("Exception in Upload-{0}", ftp1.LocalFile), ex);
            }
        }

        private void Ftp1_OnTransfer(object sender, FtpTransferEventArgs e)
        {
            this.byteSent = e.BytesTransferred;
        }

        private void Ftp1_OnEndTransfer(object sender, FtpEndTransferEventArgs e)
        {

        }

        /// <summary>
        /// Downloads this instance.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Download
        public void Download()
        {
            try
            {
                if (ftp1 == null) ftp1 = new Ftp(Container);
                ftp1.RuntimeLicense = "31504E4241414E58524634574A31303835380000000000000000000000000000000000000000000041364738424650540000564E30473250594D574D344D0000";
                ftp1.Download();
            }
            catch (Exception ex)
            {
                throw new TelEnvyXmlLib.Exceptions.TeLMessageException(ex.Message, ex);
            }
        }
        /// <summary>
        /// Logons this instance.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Logon
        public void Logon()
        {
            if (ftp1 == null)
                ftp1 = new Ftp();
            ftp1.RuntimeLicense =
                    "31504E4241414E58524634574A31303835380000000000000000000000000000000000000000000041364738424650540000564E30473250594D574D344D0000";

            try
            {
                //IPHostEntry hostInfo = System.Net.Dns.GetHostEntry(ftp1.RemoteHost);
               // var iPAddress = hostInfo.AddressList[0];
                StaticLogger.LogInfo("PZ_API_53", $"FTP Logon Initiated to host: {ftp1.RemoteHost}");
                ftp1.Logon();
                StaticLogger.LogInfo("PZ_API_53", string.Format("FTP Logon Completed"));
            }
            catch (Exception ex)
            {
                StaticLogger.LogError("PZ_API_53", ex, $"Ftp Login Failed.. {ex.Message}");
                throw new TelUnclassifiedException("Exception in Logon", ex);

            }
            finally
            {

            }
        }



        /// <summary>
        /// Logs the off.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LogOff
        public void LogOff()
        {
            if (ftp1 == null) ftp1 = new Ftp(Container);
            ftp1.RuntimeLicense = "31504E4241414E58524634574A31303835380000000000000000000000000000000000000000000041364738424650540000564E30473250594D574D344D0000";

            try
            {
                StaticLogger.LogInfo("PZ_API_53", string.Format("FTP Logoff Initiated"));
                ftp1.Logoff();
                StaticLogger.LogInfo("PZ_API_53", string.Format("FTP Logoff Completed"));
            }
            catch (Exception ex)
            {
                StaticLogger.LogError("PZ_API_53", ex, string.Format("Ftp Logoff Failed.. {0}", ex.Message));
                throw new TelUnclassifiedException("Exception in Logoff", ex);
            }
            finally
            {

            }

        }
        /// <summary>
        /// Renames the file.
        /// </summary>
        /// <param name="newFileName">New name of the file.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for RenameFile
        public void RenameFile(string newFileName)
        {
            try
            {
                if (ftp1 == null) ftp1 = new Ftp(Container);
                ftp1.RuntimeLicense = "31504E4241414E58524634574A31303835380000000000000000000000000000000000000000000041364738424650540000564E30473250594D574D344D0000";
                ftp1.RenameFile(newFileName);

            }
            catch (Exception ex)
            {
                throw new TelUnclassifiedException(string.Format("Exception in RenameFile-{0}", newFileName), ex);
            }
            finally
            {

            }
        }

        /// <summary>
        /// Logs the message.
        /// </summary>
        /// <param name="v">The v.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LogMessage
        public void LogMessage(string v)
        {

        }
    }

}
