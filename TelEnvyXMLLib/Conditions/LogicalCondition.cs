// ***********************************************************************
// Assembly         : TeLXmlLib
// Author           : Timothy Peer, ENVy Systems, Inc.
// Created          : 01-25-2018
//
// Last Modified By : tim
// Last Modified On : 01-31-2018
// ***********************************************************************
// <copyright file="LogicalCondition.cs" company="eNVy Systems, Inc.">
//     Copyright © eNVy Systems, Inc. 2011
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections.Generic;
using System.Xml;

namespace TelEnvyXmlLib.Conditions
{
    #region Documentation
    /// Class LogicalCondition.
    ///
    /// \author Timothy Peer, eNVy Systems Inc.
    /// \date   6/26/2019
    ///
    /// \sa TelEnvyXmlLib.Conditions.ConditionBase
    /// <autogeneratedoc />
    /// //
    #endregion

    ///-------------------------------------------------------------------------------------------------
    /// <summary>   A logical condition. </summary>
    ///
    /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
    ///
    /// <seealso cref="T:TelEnvyXmlLib.Conditions.ConditionBase"/>
    ///-------------------------------------------------------------------------------------------------

    public abstract class LogicalCondition : ConditionBase
    {
        #region Documentation
        /// Gets the condition nodes.
        ///
        /// \returns    The condition nodes.
        #endregion

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets the condition nodes. </summary>
        ///
        /// <value> The condition nodes. </value>
        ///
        /// <seealso cref="P:TelEnvyXmlLib.Conditions.ConditionBase.ConditionNodes"/>
        ///-------------------------------------------------------------------------------------------------

        public override List<TelEnvyXmlLib.Abstract.TeLSessionNode> ConditionNodes
        {
            get
            {
                List<TelEnvyXmlLib.Abstract.TeLSessionNode> nodes = new List<TelEnvyXmlLib.Abstract.TeLSessionNode>();
                foreach (ConditionBase child in ChildConditions)
                {
                    nodes.AddRange(child.ConditionNodes);
                }
                return nodes;
            }
        }

        #region Documentation
        /// Gets or sets the child conditions.
        ///
        /// \returns    The child conditions.
        #endregion

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets the child conditions. </summary>
        ///
        /// <value> The child conditions. </value>
        ///-------------------------------------------------------------------------------------------------

        public List<ConditionBase> ChildConditions { get; private set; }

        #region Documentation
        /// Initializes a new instance of the <see cref="LogicalCondition" /> class.
        ///
        /// \author Timothy Peer, eNVy Systems Inc.
        /// \date   6/26/2019
        ///
        /// \exception  TeLInvalidDataFormatException   Thrown when a Te L Invalid Data Format error
        ///                                             condition occurs.
        ///
        /// \param  node    The node.
        /// \param  type    The type.
        ///
        /// ### exception   TelEnvyXmlLib.Exceptions.TeLInvalidDataFormatException  .
        #endregion

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Initializes a new instance of the TelEnvyXmlLib.Conditions.LogicalCondition class.
        ///             </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="TeLInvalidDataFormatException"> Thrown when a Te L Invalid Data Format error
        ///                                                  condition occurs.</exception>
        ///
        /// <param name="node"> The node.</param>
        /// <param name="type"> The type.</param>
        ///-------------------------------------------------------------------------------------------------

        public LogicalCondition(XmlNode node, TelEnvyXmlLib.Enums.IfConditionType type)
            : base(node, type)
        {
            ChildConditions = new List<ConditionBase>();

            int i = 0;
            for (XmlNode child = TelEnvyXmlLib.Helper.TeLSessionXmlParser.ReadNextChildElement(node, ref i); child != null; child = TelEnvyXmlLib.Helper.TeLSessionXmlParser.ReadNextChildElement(node, ref i))
            {
                if (child.Name != "IfCondition")
                    throw new TelEnvyXmlLib.Exceptions.TeLInvalidDataFormatException(string.Format("Unexpected node {0} ({1}) encountered.", child.Name, child.NodeType));
                ChildConditions.Add(ConditionBase.Parse(child));
            }
        }
    }
}
