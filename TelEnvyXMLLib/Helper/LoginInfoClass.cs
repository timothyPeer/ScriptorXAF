// ***********************************************************************
// Assembly         : TelEnvyXmlLib
// Author           : Timothy Peer
// Created          : 02-07-2018
//
// Last Modified By : Timothy Peer
// Last Modified On : 02-07-2018
// ***********************************************************************
// <copyright file="LoginInfoClass.cs" company="eNVy Systems, Inc.">
//     Copyright © eNVy Systems, Inc. 2011
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TelEnvyXmlLib.Exceptions;

namespace TelEnvyXmlLib.Helper
{
    #region Documentation
    /// Class LoginInfoClass.
    ///
    /// \author Timothy Peer, eNVy Systems Inc.
    /// \date   6/26/2019
    ///
    /// \sa TelEnvyXmlLib.Helper.LoginInfo
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for LoginInfoClass
    #endregion

    ///-------------------------------------------------------------------------------------------------
    /// <summary>   A login information class. </summary>
    ///
    /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
    ///
    /// <seealso cref="T:TelEnvyXmlLib.Helper.LoginInfo"/>
    ///-------------------------------------------------------------------------------------------------

    public class LoginInfoClass : LoginInfo
    {
        #region Documentation
        /// Initializes a new instance of the <see cref="LoginInfoClass"/> class.
        ///
        /// \author Timothy Peer, eNVy Systems Inc.
        /// \date   6/26/2019
        #endregion

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Initializes a new instance of the TelEnvyXmlLib.Helper.LoginInfoClass class.
        ///             </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///-------------------------------------------------------------------------------------------------

        public LoginInfoClass()
        {

        }

        #region Documentation
        /// Initializes a new instance of the <see cref="LoginInfoClass"/> class. The domain subdirectory
        /// should match the FQDN used by the incoming url
        /// http[s]://someaddress/{domain}/{domainSubDirectory}?...
        ///
        /// \author Timothy Peer, eNVy Systems Inc.
        /// \date   6/26/2019
        ///
        /// \param  domainSubDirectory  The domain directory.
        #endregion

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Initializes a new instance of the TelEnvyXmlLib.Helper.LoginInfoClass class.
        ///             </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="domainSubDirectory">   Pathname of the domain sub directory.</param>
        ///-------------------------------------------------------------------------------------------------

        public LoginInfoClass(string domainSubDirectory)
            : base(domainSubDirectory)
        {
            
        }

        #region Documentation
        /// Merges the login information with module information. It is expected the loginInfoXML is a
        /// well formed XML document.
        ///
        /// \author Timothy Peer, eNVy Systems Inc.
        /// \date   6/26/2019
        ///
        /// \exception  TeLXmlLibMalFormedInfoXML   Thrown when a te l XML Library mal formed Information
        ///                                         XML error condition occurs.
        ///
        /// \param          loginInfoXML    The login information XML.
        /// \param [in,out] moduleInfoXML   The module information XML.
        ///
        /// \returns    True if it succeeds, false if it fails.
        ///
        /// ### remarks
        /// This function will populate the ModuleInfoXML file's SeqSess tags with the default LoginInfo
        /// values.  
        /// The LoginInfo object is populated by this method function.
        #endregion

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Merge login information with module information. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="TeLXmlLibMalFormedInfoXML"> Thrown when a te l XML Library mal formed
        ///                                              Information XML error condition occurs.</exception>
        ///
        /// <param name="loginInfoXML">     The login information XML.</param>
        /// <param name="moduleInfoXML">    [in,out] The module information XML.</param>
        ///
        /// <returns>   True if it succeeds, false if it fails. </returns>
        ///-------------------------------------------------------------------------------------------------

        public bool MergeLoginInfoWithModuleInfo(string loginInfoXML, ref string moduleInfoXML)
        {
            bool isValid = false;
            try
            {
                var doc = new XmlDocument();
                doc.LoadXml(loginInfoXML);
                XmlNodeList xnList = doc.SelectNodes("/LoginInfo");    // <LoginInfo xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
                foreach (XmlNode xmlNode in xnList)
                {
                    this.IsEncrypted = Convert.ToBoolean(xmlNode["IsEncrypted"].InnerText);
                    this.TeLDBConnectionString = xmlNode["TexDBConnectionString"].InnerText;
                    this.TeLDebugDirectory = xmlNode["TeLDebugDirectory"].InnerText;
                    this.TeLDebugEnabled = Convert.ToBoolean(xmlNode["TeLDebugEnabled"].InnerText);
                    this.TeLHostname = xmlNode["TeLHostname"].InnerText;
                    this.TeLHostPassword = xmlNode["TeLHostPassword"].InnerText;
                    this.TeLInputDirectory = xmlNode["TeLInputDirectory"].InnerText;
                    this.TeLHostUserName = xmlNode["TeLUserName"].InnerText;
                    this.TeLLogDirectory = xmlNode["TeLLogDirectory"].InnerText;
                    this.TeLLoggingEnabled = Convert.ToBoolean(xmlNode["TeLLogEnabled"].InnerText);
                    this.TeLLoggingLevel = (Enums.LogLevel)Convert.ToInt32(xmlNode["TeLLoggingLevel"].InnerText);
                    this.TeLOutputDirectory = xmlNode["TeLOutPutDirectory"].InnerText;
                    this.TeLRecordingDirectory = xmlNode["TeLRecordingDirectory"].InnerText;
                    this.TeLRecordingEnabled = Convert.ToBoolean(xmlNode["TeLRecordingEnabled"].InnerText);
                    this.TeLScreenLength = Convert.ToInt32(xmlNode["TeLScreenLength"].InnerText);
                    this.TeLScreenWidth = Convert.ToInt32(xmlNode["TeLScreenWidth"].InnerText);
                    this.TeLServerPrompt = xmlNode["TeLServerPrompt"].InnerText;
                    this.TeLServerTimeout = Convert.ToInt32(xmlNode["TeLServerTimeout"].InnerText);
                    isValid = true;
                }
            }
            catch (Exception ex)
            {
                    Exception exx = new Exception(string.Format("{0} is Malformed\n", loginInfoXML), ex);
                    throw new TeLXmlLibMalFormedInfoXML("Program Function Error", exx);
            }
            finally
            {

            }

            if (isValid)
            {
                try
                {
                    var modDoc = new XmlDocument(); // ModuleInfoXML
                    modDoc.LoadXml(moduleInfoXML);
                    XmlNode xnList = modDoc.SelectSingleNode("/Session/SessSeq");    // <SessSeq ServerName="10.87.13.67" ServerTimeout="2000" DebugEnabled="true" LoggingEnabled="true" RecordingEnabled="true">
                    XmlElement serverNameAtt = modDoc.DocumentElement;
                    serverNameAtt.SetAttribute("ServerName", this.TeLHostname);
                    serverNameAtt.SetAttribute("ServerTimeOut", Convert.ToString(this.TeLServerTimeout));
                    serverNameAtt.SetAttribute("DebugEnabled", Convert.ToString(this.TeLDebugEnabled).ToLower());
                    serverNameAtt.SetAttribute("LoggingEnabled", Convert.ToString(this.TeLLoggingEnabled).ToLower());
                    serverNameAtt.SetAttribute("RecordingEnabled", Convert.ToString(this.TeLRecordingEnabled).ToLower());

                    //foreach (XmlAttribute item in serverNameAtt)
                    //{
                    //    if (item.Name.Contains("ServerName")) item.Value = this.TeLHostname;
                    //    if (item.Name.Contains("ServerTimeOut")) item.Value = Convert.ToString(this.TeLServerTimeout);
                    //    if (item.Name.Contains("DebugEnabled")) item.Value = Convert.ToString(this.TeLDebugEnabled).ToLower();
                    //    if (item.Name.Contains("LoggingEnabled")) item.Value = Convert.ToString(this.TeLLoggingEnabled).ToLower();
                    //    if (item.Name.Contains("RecordingEnabled")) item.Value = Convert.ToString(this.TeLRecordingEnabled).ToLower();
                    //}
                }
                catch (Exception ex)
                {
                    Exception exx = new Exception(string.Format("{0} is Malformed\n", moduleInfoXML), ex);
                    throw new TeLXmlLibMalFormedInfoXML("Program Function Error", exx);
                }
                finally
                {

                }
            }
            return false;
        }
    }
}
