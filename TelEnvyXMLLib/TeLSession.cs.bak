 
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
//using System.Runtime.InteropServices;
using System.Threading;
using System.Xml;
using Rebex.TerminalEmulation;
using TelEnvyXmlLib.Abstract;
using TelEnvyXmlLib.Directives;
using TelEnvyXmlLib.Enums;
using TelEnvyXmlLib.EventArgs;
using TelEnvyXmlLib.Exceptions;
using TelEnvyXmlLib.Helper;



/*
 *  The TeLSession (TeL) component is designed to process a single file at a time. This class encapsulates functionality while scanning / inspecting an XML file to 
 *  execute a series of transaction responses... 
 *  
 * Tag Support Matrix.
 *  
 *  Five operations are handled by this component.
 *  Input			Output Validation			Output				Conditional				Collections
 *  <SendEnter>		<Expect>					<GrabLine>			<If>					<GroupCollection>
 *  <SendTab>		<WaitForData>				<GrabLines>			  <IfCondition>
 *  <SendData>		<WaitForCursor>				<GrabInt32>			  <IfElse>
 *  <SendPF1>									<GrabDouble>		<while>
 *  <SendPF2>														  <IfCondition>
 *  <SendPF3>
 *  <SendPF4>
 *  <SendF1>
 *  <SendF2>
 *  <SendF3>
 *  <SendF4>
 *  <SendF5>
 *  <SendF6>
 *  <SendF7>
 *  <SendF8>
 *  <SendF9>
 *  <SendF10>
 *  <SendF11>
 *  <SendF12>
 *  <SendSpace>
 *  
 * Definition and Arguments:
 * 
 * Rules:
 * The XML file is responsible for all actions of a transaction including, login, password and the order with which messages are sent to the telnet server.
 * The XML File is well formed.
 * Output elements are passed back to the calling application via event delegates. It is the responsibility of the main application to handle / parse / consume data received by a GrabChanged event delegate.
 * 
 */


namespace TelEnvyXmlLib
{
    // ***********************************************************************
    // Assembly         : TeLXmlLib
    // Author           : Tim Peer
    // Created          : 01-30-2018
    //
    // Last Modified By : Tim Peer
    // Last Modified On : 02-24-2018
    // ***********************************************************************
    // <copyright file="TeLSession.cs" company="eNVy Systems, Inc.">
    //     Copyright © eNVy Systems, Inc. 2011
    // </copyright>
    // <summary></summary>
    //


    ///-------------------------------------------------------------------------------------------------
    /// <summary>   A te l session. </summary>
    ///
    /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
    ///
    /// <seealso cref="T:System.ComponentModel.Component"/>
    ///-------------------------------------------------------------------------------------------------

    [System.ComponentModel.Description("Class TeLSession.")]
    public partial class TeLSession : Component
    {
        /// <summary>   Occurs when [write log]. </summary>
        public event EventHandler<TelLogWriterEventArg> ChangeLogFileName;  /* Occurs when Change Log File Name. */



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Executes the change log file name action. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="sender">   Source of the event.</param>
        /// <param name="e">        A TelLogWriterEventArg to process.</param>
        ///-------------------------------------------------------------------------------------------------

        protected virtual void OnChangeLogFileName(object sender, TelLogWriterEventArg e)
        {
            EventHandler<TelLogWriterEventArg> handler = ChangeLogFileName;
            if (handler != null)
                handler(sender, e);
        }

        #region Constants
        /// <summary>   Escape Sequence: \x1B. </summary>
        const string Escape = "\x1B";   /* The escape */
        /// <summary>   Escape Sequence: \x1B[. </summary>
        const string Csi = "\x1B["; /* The csi */

        /// <summary>
        /// The default debug path
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DefaultDebugPath

        const string DefaultDebugPath = @"C:\envy\tel\DebugPNG\";   /* . */
        /// <summary>
        /// The default log path
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DefaultLogPath
        const string DefaultLogPath = @"C:\envy\tel\logs\"; /* . */
        /// <summary>
        /// The DefaultRecordPath
        /// </summary>

        const string DefaultRecordPath = @"C:\envy\tel\DebugREC\";  /* . */

        /// <summary>   Default screen width (columns). The default is 132. </summary>
        public const int DefaultScreenWidth = 132;  /* The default screen width */
        /// <summary>   Default screen height (rows). The default is 24. </summary>
        public const int DefaultScreenHeight = 24;  /* The default screen height */

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   The default server timeout. The Default is 3000. May be overridden in the
        ///             LoginInfo.XML file.
        ///             </summary>
        ///-------------------------------------------------------------------------------------------------

        const int DefaultServerTimeout = 1000;  /* The default server timeout */



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the log file specification. </summary>
        ///
        /// <value> The log file specification. </value>
        ///-------------------------------------------------------------------------------------------------

        public string LogFileSpecification { get; set; }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the Date/Time of the transaction timestamp. </summary>
        ///
        /// <value> The transaction timestamp. </value>
        ///-------------------------------------------------------------------------------------------------

        public DateTime TransactionTimestamp { get; set; }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets a unique identifier of the transaction. </summary>
        ///
        /// <value> Unique identifier of the transaction. </value>
        ///-------------------------------------------------------------------------------------------------

        public Guid TransactionGuid { get; set; }

        /// <summary>   The session incrementer. </summary>
        long logIncrementing = 0L;  /* The log incrementing */
        /// <summary>   The debug incrementing. </summary>
        long debugIncrementing = 0L;    /* The debug incrementing */
        /// <summary>   The record incrementing. </summary>
        long recordIncrementing = 0L;   /* The record incrementing */
        /// <summary>   The tel envy log level. </summary>
        LogLevel TelEnvyLogLevel;   /* The tel envy log level */
        #endregion

        #region Variables

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   The canceling. </summary>
        ///
        /// ### <seealso cref="TelEnvyXmlLib.TeLSession.Cancel"/>
        ///-------------------------------------------------------------------------------------------------

        volatile bool _canceling;   /* True to canceling */
        /// <summary>   The object secures "locks" the object while processing. </summary>
        object _syncRoot = new object();    /* The synchronise root */

        /// <summary>   The file that will be processed by this component. </summary>
        string _fileToProcess;  /* The file to process */



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the send data wait for data timeout. </summary>
        ///
        /// <value> The send data wait for data timeout. </value>
        ///-------------------------------------------------------------------------------------------------

        public int sendDataWaitForDataTimeout { get; set; }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the receive data wait for data timeout. </summary>
        ///
        /// <value> The receive data wait for data timeout. </value>
        ///-------------------------------------------------------------------------------------------------

        public int receiveDataWaitForDataTimeout { get; set; }

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Session LoginInfo environment settings.   The LoginInfo.XML file is located in a
        ///             subdirectory within "c:\eNVy\TeL\".
        ///             </summary>
        ///-------------------------------------------------------------------------------------------------

        public TelEnvyXmlLib.Helper.LoginInfo settings; /* Options for controlling the operation */
        /// <summary>   A root element to be processed. </summary>
        Session _session;   /* The session */

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   A second instance for debugging / displaying real-time updates when processing an
        ///             XML file.
        ///             </summary>
        ///-------------------------------------------------------------------------------------------------

        TerminalControl _debugScreen;   /* The debug screen */

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Helper class which responds to the tags specified in the Tag Support Matrix.
        ///             </summary>
        ///-------------------------------------------------------------------------------------------------

        TelEnvyXmlLib.Helper.VirtualTerminalHelper _helper; /* The helper */
        /// <summary>   A logging class. </summary>
        Rebex.FileLogWriter _logger;    /* The logger */
                                        //   SimpleLogger _simpleLoggerWriter;                // Internal Logging

        // following private fields represents current setting
        /// <summary>   The debug enabled. </summary>
        bool _debugEnabled; /* True to enable, false to disable the debug */
        /// <summary>   The log enabled. </summary>
        bool _logEnabled;   /* True to enable, false to disable the log */
        /// <summary>   The record enabled. </summary>
        bool _recordEnabled;    /* True to enable, false to disable the record */

        #endregion


        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets the helper. </summary>
        ///
        /// <value> The helper. </value>
        ///-------------------------------------------------------------------------------------------------

        public TelEnvyXmlLib.Helper.VirtualTerminalHelper Helper { get { return _helper; } }

        #region Properties


        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the recording enabled. </summary>
        ///
        /// <value> The recording enabled. </value>
        ///-------------------------------------------------------------------------------------------------

        public bool? RecordingEnabled { get; set; }         // 



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the logging enabled. </summary>
        ///
        /// <value> The logging enabled. </value>
        ///-------------------------------------------------------------------------------------------------

        public bool? LoggingEnabled { get; set; }           // 



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the debugging enabled. </summary>
        ///
        /// <value> The debugging enabled. </value>
        ///-------------------------------------------------------------------------------------------------

        public bool? DebuggingEnabled { get; set; }          // 
        #endregion

        #region Connection Properties
        /// <summary>   The server time out... the. </summary>
        int _serverTimeout = DefaultServerTimeout;  /* The server timeout */



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the name of the server. </summary>
        ///
        /// <value> The name of the server. </value>
        ///-------------------------------------------------------------------------------------------------

        public string ServerName { get; set; }                  // The Server to which the component will connect     


        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the name of the server user. </summary>
        ///
        /// <value> The name of the server user. </value>
        ///-------------------------------------------------------------------------------------------------

        public string ServerUserName { get; set; }              // The UserID on the server.



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the server password. </summary>
        ///
        /// <value> The server password. </value>
        ///-------------------------------------------------------------------------------------------------

        public string ServerPassword { get; set; }              // The Password used by the Userid on the server.



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the server prompt. </summary>
        ///
        /// <value> The server prompt. </value>
        ///-------------------------------------------------------------------------------------------------

        public string ServerPrompt { get; set; }             // The Server Prompt



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the server timeout. </summary>
        ///
        /// <value> The server timeout. </value>
        ///-------------------------------------------------------------------------------------------------

        [DefaultValue(DefaultServerTimeout)]
        public int ServerTimeout                                // Server Timeout         
        {
            get { return _serverTimeout; }
            set { _serverTimeout = value; }
        }
        #endregion
        

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the pathname of the te l debug directory. </summary>
        ///
        /// <value> The pathname of the te l debug directory. </value>
        ///-------------------------------------------------------------------------------------------------

        public string TeLDebugDirectory { get; set; }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the pathname of the te l recording directory. </summary>
        ///
        /// <value> The pathname of the te l recording directory. </value>
        ///-------------------------------------------------------------------------------------------------

        [DefaultValue(@"C:\Envy\TelEnvy\RecorderFiles")]
        public string TeLRecordingDirectory { get; set; }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the pathname of the te l log directory. </summary>
        ///
        /// <value> The pathname of the te l log directory. </value>
        ///-------------------------------------------------------------------------------------------------

        [DefaultValue(@"C:\Envy\TelEnvy\Logs")]
        public string TeLLogDirectory { get; set; }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the pathname of the te l output directory. </summary>
        ///
        /// <value> The pathname of the te l output directory. </value>
        ///-------------------------------------------------------------------------------------------------

        [DefaultValue(@"C:\Envy\TelEnvy\OutputFiles")]
        public string TeLOutputDirectory { get; set; }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets or sets the pathname of the te l input directory. </summary>
        ///
        /// <value> The pathname of the te l input directory. </value>
        ///-------------------------------------------------------------------------------------------------

        [DefaultValue(@"C:\Envy\TelEnvy\InputFiles")]
        public string TeLInputDirectory { get; set; }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets a value indicating whether this TeLSession is canceled. </summary>
        ///
        /// <value> True if this TeLSession is canceled, false if not. </value>
        ///-------------------------------------------------------------------------------------------------

        public bool IsCanceled { get; private set; }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets a value indicating whether this TeLSession is faulted. </summary>
        ///
        /// <value> True if this TeLSession is faulted, false if not. </value>
        ///-------------------------------------------------------------------------------------------------

        public bool IsFaulted { get; private set; }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets the exception. </summary>
        ///
        /// <value> The exception. </value>
        ///-------------------------------------------------------------------------------------------------

        public Exception Exception { get; private set; }



        #region Events

        /// <summary>   Occurs when [log written]. </summary>
        public event EventHandler<TelEnvyXmlLib.EventArgs.TelLogWriterEventArg> LogWriting; /* Occurs when Log Writing. */
        /// <summary>   Occurs before TelEnvyXmlLib XML node is processed by the TexSession. </summary>
        public event EventHandler<TelEnvyXmlLib.EventArgs.TeLSessionNodeProcessEventArg> NodeProcessing;    /* Occurs when Node Processing. */
        /// <summary>   Occurs after a TelEnvyXmlLib XML node is processed by the TexSession. </summary>
        public event EventHandler<TelEnvyXmlLib.EventArgs.TeLSessionNodeProcessEventArg> NodeProcessed; /* Occurs when Node Processed. */

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   The Event-handler passes captured data from the TelEnvyXmlLib session to the
        ///             application.
        ///             </summary>
        ///-------------------------------------------------------------------------------------------------

        public event EventHandler<TelEnvyXmlLib.EventArgs.GrabChangedEventArgs> GrabChanged;    /* Occurs when Grab Changed. */

        /// <summary>   Occurs when the node canceled. </summary>
        public event EventHandler<TelEnvyXmlLib.EventArgs.TeLSessionNodeCancelEventArg> NodeCanceled;   /* Occurs when Node Canceled. */



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Executes the log written action. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="sender">   Source of the event.</param>
        /// <param name="e">        A TelLogWriterEventArg to process.</param>
        ///-------------------------------------------------------------------------------------------------

        protected virtual void OnLogWritten(object sender, TelEnvyXmlLib.EventArgs.TelLogWriterEventArg e)
        {
            EventHandler<TelEnvyXmlLib.EventArgs.TelLogWriterEventArg> handler = LogWriting;
            if (handler != null)
                handler(sender, e);
        }

       

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Executes the node canceled action. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="sender">   Source of the event.</param>
        /// <param name="e">        A TeLSessionNodeCancelEventArg to process.</param>
        ///-------------------------------------------------------------------------------------------------

        protected virtual void OnNodeCanceled(object sender, TelEnvyXmlLib.EventArgs.TeLSessionNodeCancelEventArg e)
        {
            EventHandler<TelEnvyXmlLib.EventArgs.TeLSessionNodeCancelEventArg> handler = NodeCanceled;
            if (handler != null)
                handler(sender, e);
        }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Executes the node processing action. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="e">    A TeLSessionNodeProcessEventArg to process.</param>
        ///-------------------------------------------------------------------------------------------------

        protected void OnNodeProcessing(TelEnvyXmlLib.EventArgs.TeLSessionNodeProcessEventArg e)
        {
            if (NodeProcessing != null)
            {
                NodeProcessing(this, e);
            }
        }

      

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Executes the node processed action. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="e">    A TeLSessionNodeProcessEventArg to process.</param>
        ///-------------------------------------------------------------------------------------------------

        protected void OnNodeProcessed(TelEnvyXmlLib.EventArgs.TeLSessionNodeProcessEventArg e)
        {
            if (NodeProcessed != null)
            {
                NodeProcessed(this, e);
            }
        }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Raises the tel envy XML lib. event args. grab changed event. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="e">    Event information to send to registered event handlers.</param>
        ///-------------------------------------------------------------------------------------------------

        protected void OnGrabChanged(TelEnvyXmlLib.EventArgs.GrabChangedEventArgs e)
        {
            if (GrabChanged != null)
            {
                GrabChanged(this, e);
            }
        }


        #endregion

        /// <summary>   The log option. </summary>
        EnumLoggingOptions LogOpt;  /* The log option */
        #region Constructor Destructors



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Initializes a new instance of the TelEnvyXmlLib.TeLSession class. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="container">    The container.</param>
        ///-------------------------------------------------------------------------------------------------

        public TeLSession(IContainer container)
            : this()
        {

            container.Add(this);
            TransactionGuid = Guid.NewGuid();
            TransactionTimestamp = DateTime.Now;
        }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Initializes a new instance of the TelEnvyXmlLib.TeLSession class. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///-------------------------------------------------------------------------------------------------

        public TeLSession()
        {
            InitializeComponent();

            TransactionGuid = Guid.NewGuid();
        }

  

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Initializes the logging file specification. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///-------------------------------------------------------------------------------------------------

        public void initializeLoggingFileSpecification()
        {
            this.LogFileSpecification = GetLogFileName();
            _logger = new Rebex.FileLogWriter(LogFileSpecification, Rebex.LogLevel.Verbose);
            TransactionTimestamp = DateTime.Now;

        }
        /// <summary>   The module name. </summary>
        private string _moduleName; /* Name of the module */



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Sets module name. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="moduleName">   The module name.</param>
        ///-------------------------------------------------------------------------------------------------

        public void setModuleName(string moduleName)
        {
            _moduleName = moduleName;
        }

     
        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Sets logging option. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="logOpt">   The log option.</param>
        ///-------------------------------------------------------------------------------------------------

        public void SetLoggingOption(EnumLoggingOptions logOpt)
        {
            LogOpt = logOpt;
        }

       

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Sets transaction unique identifier. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="guidStr">  The unique identifier string.</param>
        ///-------------------------------------------------------------------------------------------------

        public void setTransactionGuid(string guidStr)
        {
            TransactionGuid = Guid.Parse(guidStr);
        }
        #endregion

        #region Public methods

     

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Sets logging verbose. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///-------------------------------------------------------------------------------------------------

        public void SetLoggingVerbose()
        {
            TelEnvyLogLevel = LogLevel.Verbose;
        }

      

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Sets logging debug. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///-------------------------------------------------------------------------------------------------

        public void SetLoggingDebug()
        {
            TelEnvyLogLevel = LogLevel.Debug;
        }

      
        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Sets logging information. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///-------------------------------------------------------------------------------------------------

        public void SetLoggingInfo()
        {
            TelEnvyLogLevel = LogLevel.Info;
        }

   

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Sets logging error. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///-------------------------------------------------------------------------------------------------

        public void SetLoggingError()
        {
            TelEnvyLogLevel = LogLevel.Verbose;
        }

    
        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Sets logging off. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///-------------------------------------------------------------------------------------------------

        public void SetLoggingOff()
        {
            TelEnvyLogLevel = LogLevel.Off;
        }

     
        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Sets logging suffix unique identifier. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///-------------------------------------------------------------------------------------------------

        public void SetLoggingSuffixGUID()
        {
            LogOpt = EnumLoggingOptions.GUID;
        }
        /// <summary>   The b logging suffix is timestamp. </summary>

        private int pngCounter; /* The PNG counter */

      

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Configure settings. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="_settings">    Options for controlling the operation.</param>
        ///-------------------------------------------------------------------------------------------------

        public void ConfigureSettings(LoginInfo _settings)
        {
            settings = _settings;

            int screenRows = _settings.TeLScreenLength > 0 ? _settings.TeLScreenLength : 24;
            int screenColumns = _settings.TeLScreenWidth > 0 ? _settings.TeLScreenWidth : 132;
            //int timeOut = _settings.TeLServerTimeout > 0 ? _settings.TeLServerTimeout : DefaultServerTimeout;
            if (_helper != null)
            {
                this._helper.Terminal.SetScreenSize(screenColumns, screenRows);
                this._helper.sendDataWaitForDataTimeout = _settings.TeLServerTimeout;
                this._helper.receiveDataWaitForDataTimeout = _settings.TeLServerTimeout;
            }


        }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Sets debug screen. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="debugScreen"> A second instance for debugging / displaying real-time updates
        ///                            when processing an XML file.</param>
        ///-------------------------------------------------------------------------------------------------

        public void SetDebugScreen(Rebex.TerminalEmulation.TerminalControl debugScreen)
        {
            _debugScreen = debugScreen;
            _debugEnabled = true;
        }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Sets send data wait for data timeout. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="timeout">  (Optional) The timeout.</param>
        ///-------------------------------------------------------------------------------------------------

        public void SetSendDataWaitForDataTimeout(int timeout = 10)
        {
            this.sendDataWaitForDataTimeout = timeout;
        }

       

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Process the file described by fileToProcess. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="ArgumentException"> Thrown when one or more arguments have unsupported or
        ///                                      illegal values.</exception>
        ///
        /// <param name="fileToProcess">    The file that will be processed by this component.</param>
        ///-------------------------------------------------------------------------------------------------

        public void ProcessFile(string fileToProcess)
        {
            logIncrementing = 0;
            recordIncrementing = 0;
            debugIncrementing = 0;
            pngCounter = 0;
            TransactionGuid = Guid.NewGuid();
            TransactionTimestamp = DateTime.Now;

            if (string.IsNullOrEmpty(fileToProcess))
                throw new ArgumentException("File cannot be empty.", "fileToProcess");

            lock (_syncRoot)
            {
                _fileToProcess = fileToProcess;

                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.Load(fileToProcess);
                Process(xmlDoc);
                string txt = GetXMLProcessedPath();

            }
        }

       

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Process the XML. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="ArgumentException"> Thrown when one or more arguments have unsupported or
        ///                                      illegal values.</exception>
        ///
        /// <param name="xmlData">  Information describing the XML.</param>
        /// <param name="fileName"> Filename of the file.</param>
        ///-------------------------------------------------------------------------------------------------

        public void ProcessXml(string xmlData, string fileName)
        {

            if (string.IsNullOrEmpty(xmlData))
                throw new ArgumentException("XmlData cannot be empty.", "xmlData");
            if (string.IsNullOrEmpty(fileName))
                throw new ArgumentException("FileName cannot be empty.", "fileName");

            lock (_syncRoot)
            {
                _fileToProcess = fileName;

                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.LoadXml(xmlData);
                Process(xmlDoc);
            }
        }

        #endregion

        #region Main methods



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Cancels this TeLSession. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///-------------------------------------------------------------------------------------------------

        public void Cancel()
        {
            _canceling = true;
        }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Process this TeLSession. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="TeLXMLInvalidTagException"> Thrown when a Te LXML Invalid Tag error condition
        ///                                              occurs.</exception>
        ///
        /// <param name="xmlDoc">   The XML document.</param>
        ///-------------------------------------------------------------------------------------------------

        public void Process(XmlDocument xmlDoc)
        {
            // Initialize counters;
            TransactionGuid = Guid.NewGuid();
            TransactionTimestamp = DateTime.Now;
            logIncrementing = 0;
            recordIncrementing = 0;
            debugIncrementing = 0;
            pngCounter = 0;

            try
            {
                // parse the whole XML first
                _session = TeLSessionXmlParser.Parse(xmlDoc.DocumentElement) as Session;
            }
            catch (Exception ex)
            {
                throw new TeLXMLInvalidTagException(xmlDoc.ToString(), ex);
            }
            finally
            {

            }

            if (_session == null)
            {
                StaticLogger.LogError(_moduleName, new TeLXMLInvalidTagException(string.Format("TeLXMLInvalidTag:\n An invalid tag found.\nExpected <Session> as a document root node and found {0}", xmlDoc.DocumentType.Name)), "Exception Occurred");
                //writeErrorToLog(4100, "TeLXMLInvalidTagException", string.Format("TeLXMLInvalidTag:\n An invalid tag found.\nExpected <Session> as a document root node and found {0}", xmlDoc.DocumentType.Name));
                throw new TeLXMLInvalidTagException(string.Format("TeLXMLInvalidTag:\n An invalid tag found.\nExpected <Session> as a document root node and found {0}", xmlDoc.DocumentType.Name));
            }

            try
            {
                // process parsed nodes

                Process(_session, 0);
                IsFaulted = false;
                Exception = null;
            }
            catch (Exception ex)
            {
                IsFaulted = true;
                Exception = ex;
            }
            finally
            {
                IsCanceled = _canceling;
                _canceling = false;



                if (_helper != null)
                {
                    if (_helper.Terminal.Recorder != null)
                    {
                        StaticLogger.LogTrace(_moduleName, "Closing Recorder");
                        _helper.Terminal.Recorder.Close();
                        _helper.Terminal.Recorder = null;
                    }

                    _helper.Terminal.Dispose();
                    _helper = null;
                }
                if (_logger != null)
                {
                    //LogFileSpecification = _logger.Filename;
                    Disconnect();
                    _logger.Close();
                    _logger = null;
                }
                logIncrementing++;
                recordIncrementing++;
                debugIncrementing++;
            }
        }

        //private void Process(XmlDocument xmlDoc)
        //{
        //	// parse the whole XML first
        //	_session = ComSessionXmlParser.Parse(xmlDoc.DocumentElement) as ComSessionSessionNode;
        //	if (_session == null)
        //              throw new TeLXMLInvalidTag(string.Format("TeLXMLInvalidTag:\n An invalid tag found.\nExpected <Session> as a document root node and found {0}",xmlDoc.DocumentType.Name));

        //	try
        //	{
        //		// process parsed nodes
        //		Process(_session, 0);				
        //	}
        //	finally
        //	{
        //		if (_logger != null)
        //			_logger.Close();

        //		if (_helper != null)
        //		{
        //			if (_helper.Terminal.Recorder != null)
        //			{
        //				_helper.Terminal.Recorder.Close();
        //				_helper.Terminal.Recorder = null;
        //			}

        //			_helper.Terminal.Dispose();
        //		}
        //	}
        //}



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Process this TeLSession. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="TeLInvalidCastException">   Thrown when a Te L Invalid Cast error condition
        ///                                              occurs.</exception>
        /// <exception cref="TeLXMLInvalidTagException"> Thrown when a Te LXML Invalid Tag error condition
        ///                                              occurs.</exception>
        ///
        /// <param name="cNode">    The node.</param>
        /// <param name="level">    The level.</param>
        ///-------------------------------------------------------------------------------------------------

        private void Process(TeLSessionNode cNode, int level)
        {
            if (cNode.Data == null)
            {
                StaticLogger.LogTrace(_moduleName, string.Format("{0}{1}", "".PadLeft(level), cNode.TeLTag));
            }
            else
            {
                StaticLogger.LogTrace(_moduleName, string.Format("{0}{1} [{2}]", "".PadLeft(level), cNode.TeLTag, cNode.Data));
            }

            if (_canceling)
            {
                StaticLogger.LogTrace(_moduleName, string.Format("Canceling..."));
                return;
            }

            //string pad = new string(' ', level * 2);
            //Console.WriteLine(pad + cNode.Tag);
            OnNodeProcessing(new TeLSessionNodeProcessEventArg(cNode, level, this._moduleName));
            switch (cNode.TeLTag)
            {
                case XmlTag.Session:
                case XmlTag.SessSeq:
                case XmlTag.GroupCollection:
                    SessSeq ssNode = cNode as SessSeq;
                    if (ssNode != null)
                        Connect(ssNode);

                    TeLSessionGroupNode gNode = cNode as TeLSessionGroupNode;
                    foreach (TeLSessionNode node in gNode.Nodes)
                    {
                        Process(node, level + 1);
                    }
                    break;

                case XmlTag.If:
                    If ifNode = cNode as If;
                    List<TeLSessionNode> ifNodesToProcess = ResolveCondition(ifNode.Condition) ? ifNode.ConditionNodes : ifNode.ElseNodes;
                    if (ifNodesToProcess != null)
                    {

                        foreach (TeLSessionNode node in ifNodesToProcess)
                        {
                            Process(node, level + 1);
                        }
                    }
                    break;

                case XmlTag.While:
                    While whileNode = cNode as While;
                    while (ResolveCondition(whileNode.Condition))
                    {
                        foreach (TeLSessionNode node in whileNode.ConditionNodes)
                        {
                            Process(node, level + 1);
                        }
                    }
                    break;

                case XmlTag.SendData:
                    SendData(cNode.Data);
                    break;
                case XmlTag.SendEnter:
                    SendData(string.Format("{0}\n", cNode.Data));
                    break;
                case XmlTag.SendTab:
                    SendData(string.Format("{0}\t", cNode.Data));
                    break;

                case XmlTag.SendSpace:
                    SendData(string.Format("{0} ", cNode.Data));
                    break;
                case XmlTag.SendPF1:
                case XmlTag.SendPF2:
                case XmlTag.SendPF3:
                case XmlTag.SendPF4:
                    SendPF(1 + cNode.TeLTag - XmlTag.SendPF1, cNode.Data);
                    break;

                case XmlTag.SendF1:
                case XmlTag.SendF2:
                case XmlTag.SendF3:
                case XmlTag.SendF4:
                case XmlTag.SendF5:
                case XmlTag.SendF6:
                case XmlTag.SendF7:
                case XmlTag.SendF8:
                case XmlTag.SendF9:
                case XmlTag.SendF10:
                case XmlTag.SendF11:
                case XmlTag.SendF12:
                    SendF(1 + cNode.TeLTag - XmlTag.SendF1);
                    break;

                case XmlTag.Expect:
                    Expect eNode = cNode as Expect;
                    string result = Expect(cNode.Data, eNode.Timeout);
                    if (eNode.Grab)
                    {
                        StaticLogger.LogTrace(_moduleName, string.Format("Expect Grab Event", result));

                        string[] lines = result.Split('\n');
                        lines = lines.Select(line => line.Trim('\r')).ToArray<string>();
                        OnGrabChanged(new TelEnvyXmlLib.EventArgs.GrabChangedEventArgs(cNode.Name, lines));
                    }
                    break;
                case XmlTag.WaitForDataWholeScreen:
                    WaitForData wfdwsNode = cNode as WaitForData;
                    WaitForDataWholeScreen(cNode.Data, wfdwsNode.Timeout);
                    break;
                case XmlTag.WaitForDataOneRow:
                    WaitForData wfdorNode = cNode as WaitForData;
                    WaitForDataOneRow(cNode.Data, wfdorNode.Row.Value, wfdorNode.Timeout);
                    break;
                case XmlTag.WaitForDataRegion:
                    WaitForData wfdrNode = cNode as WaitForData;
                    WaitForDataRegion(cNode.Data, wfdrNode.Column.Value, wfdrNode.Row.Value, wfdrNode.Width.Value, wfdrNode.Height.Value, wfdrNode.Timeout);
                    break;
                case XmlTag.WaitForCursor:
                    WaitForCursor wfcNode = cNode as WaitForCursor;
                    WaitForCursor(wfcNode.Column, wfcNode.Row, wfcNode.Timeout);
                    break;

                case XmlTag.GrabLine:
                    {
                        GrabLine glNode = cNode as GrabLine;
                        string line = GrabLine(glNode.Column, glNode.Row, glNode.Width);
                        OnGrabChanged(new GrabChangedEventArgs(cNode.Name, new string[] { line }));
                    }
                    break;
                case XmlTag.GrabLines:
                    {
                        GrabLines glsNode = cNode as GrabLines;
                        string[] lines = GrabLines(glsNode.Column, glsNode.Row, glsNode.Width, glsNode.Height);
                        OnGrabChanged(new GrabChangedEventArgs(cNode.Name, lines));

                    }
                    break;
                case XmlTag.GrabInt32:
                    {
                        GrabLine glNode = cNode as GrabLine;
                        string line = GrabLine(glNode.Column, glNode.Row, glNode.Width);
                        try
                        {
                            Int32 txx = Convert.ToInt32(line);
                        }
                        catch (Exception ex)
                        {
                            writeErrorToLog(4100, "TeLInvalidCastException", string.Format("TeXInvalidCast:\nInvalid System.Int32 Cast Attempt for [{0}].\nMessage:{1}.", line, ex.Message));
                            throw new TeLInvalidCastException(string.Format("TeXInvalidCast:\nInvalid System.Int32 Cast Attempt for [{0}].\nMessage:{1}.", line, ex.Message)); ;
                        }

                        OnGrabChanged(new GrabChangedEventArgs(cNode.Name, new string[] { line }));
                    }
                    break;
                case XmlTag.GrabDouble:
                    {
                        GrabLine glNode = cNode as GrabLine;
                        string line = GrabLine(glNode.Column, glNode.Row, glNode.Width);
                        try
                        {
                            double txx = Convert.ToDouble(line);
                        }
                        catch (Exception ex)
                        {
                            writeErrorToLog(4100, "TeLInvalidCastException", string.Format("TeLInvalidCast:\nInvalid System.Double Cast Attempt for [{0}].\nMessage:{1}.", line, ex.Message));
                            throw new TeLInvalidCastException(string.Format("TeLInvalidCast:\nInvalid System.Double Cast Attempt for [{0}].\nMessage:{1}.", line, ex.Message));
                        }
                        OnGrabChanged(new GrabChangedEventArgs(cNode.Name, new string[] { line }));
                    }
                    break;
                default:
                    {
                        writeErrorToLog(4100, "TeLXMLInvalidTagException", string.Format("TeLXMLInvalidTag:\n XmlTag <{0}> out of range.", cNode.TeLTag.ToString()));

                        throw new TeLXMLInvalidTagException(string.Format("TeLXMLInvalidTag:\n XmlTag <{0}> out of range.", cNode.TeLTag.ToString()));
                    }
            }
            OnNodeProcessed(new TeLSessionNodeProcessEventArg(cNode, level, _moduleName));
        }

 

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Connects the given node. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="node"> The node to connect.</param>
        ///-------------------------------------------------------------------------------------------------

        private void Connect(Directives.SessSeq node)
        {
            _debugEnabled = false;
            _logEnabled = false;
            _recordEnabled = false;

            if (_logEnabled)
            {
                // _logger = new Rebex.FileLogWriter(GetLogFileName(), Rebex.LogLevel.Verbose);
                // _simpleLoggerWriter = new SimpleLogger(Encoding.Default);
                switch (TelEnvyLogLevel)
                {
                    case LogLevel.Verbose:
                        _logger.Level = Rebex.LogLevel.Verbose;
                        break;
                    case LogLevel.Debug:
                        _logger.Level = Rebex.LogLevel.Debug;
                        break;
                    case LogLevel.Info:
                        _logger.Level = Rebex.LogLevel.Info;
                        break;
                    case LogLevel.Error:
                        _logger.Level = Rebex.LogLevel.Error;

                        break;
                    case LogLevel.Off:
                        _logger.Level = Rebex.LogLevel.Info;
                        break;
                }
            }
            else
                _logger = null;

            // The connection object which is bound to VT, VTH and VS
            Rebex.Net.Telnet client = new Rebex.Net.Telnet(node.ServerName ?? ServerName) { LogWriter = _logger };
            StaticLogger.LogInfo(_moduleName, string.Format("Connect - Server Host: {0}", node.ServerName ?? ServerName));

            // start new VirtualTerminal with specified screen size
            VirtualTerminal terminal = client.StartVirtualTerminal(null, node.PageWidth ?? DefaultScreenWidth, node.PageLength ?? DefaultScreenHeight);
            terminal.RemoteResize += terminal_RemoteResize;
            if (_debugEnabled)
                terminal.DataReceived += terminal_DataReceived;
            if (_recordEnabled)
                terminal.Recorder = File.CreateText(GetRecordPath());
            terminal.Options.Encoding = Encoding.ASCII;
            terminal.Options.TerminalType = TerminalType.Ansi;
            terminal.Options.BackspaceSequence = BackspaceSequence.Del;
            terminal.SetModuleLogName(_moduleName);
            StaticLogger.LogTrace(_moduleName, string.Format("Encoding: {0}\nTerminalType: {1}", terminal.Options.Encoding, terminal.Options.TerminalType));

            var sendInfoTeXTimeout = (sendDataWaitForDataTimeout != 0) ? sendDataWaitForDataTimeout : settings.TeLServerTimeout;
            var receiveInfoTeXTimeout = (receiveDataWaitForDataTimeout != 0) ? receiveDataWaitForDataTimeout : settings.TeLServerTimeout;

            _helper = new VirtualTerminalHelper(terminal)
            {
                receiveDataWaitForDataTimeout = receiveInfoTeXTimeout,
                sendDataWaitForDataTimeout = sendInfoTeXTimeout
            };
            _helper.SetLogModuleName(_moduleName);
            StaticLogger.LogTrace(_moduleName, string.Format("Receive Data Timeout : {0}", receiveInfoTeXTimeout));
            StaticLogger.LogTrace(_moduleName, string.Format("Send Timeout : {0}", sendInfoTeXTimeout));


        }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Event handler. Called by terminal for remote resize events. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="sender">   Source of the event.</param>
        /// <param name="e">        Remote resize event information.</param>
        ///-------------------------------------------------------------------------------------------------

        void terminal_RemoteResize(object sender, RemoteResizeEventArgs e)
        {
            _helper.Terminal.SetScreenSize(e.Columns, e.Rows);
            LogTrace(6100, "Virtual Terminal: ", string.Format("ScreenSize Columns: {0} Rows: {1}", e.Columns, e.Rows));
        }

 

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Event handler. Called by terminal for data received events. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="sender">   Source of the event.</param>
        /// <param name="e">        Data received event information.</param>
        ///-------------------------------------------------------------------------------------------------

        void terminal_DataReceived(object sender, Rebex.TerminalEmulation.DataReceivedEventArgs e)
        {
            if (_debugEnabled && _debugScreen != null)
            {
                if (_debugScreen.InvokeRequired)
                    _debugScreen.Invoke(new Action<string>(WriteToDebugScreen), e.RawData);
                else
                    WriteToDebugScreen(e.RawData);
            }
        }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Writes to debug screen. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="rawData">  Information describing the raw.</param>
        ///-------------------------------------------------------------------------------------------------

        private void WriteToDebugScreen(string rawData)
        {
            _debugScreen.Screen.Write(rawData);
            // just for sure the control is updated immediately
            _debugScreen.Refresh();
        }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Logs a trace. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="objectId"> Identifier for the object.</param>
        /// <param name="logArea">  The log area.</param>
        /// <param name="message">  The message.</param>
        ///-------------------------------------------------------------------------------------------------

        internal void LogTrace(int objectId, string logArea, string message)
        {

            if (_logger != null) this._logger.Write(Rebex.LogLevel.Debug, _logger.GetType(), objectId, logArea, message);

        }


        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Writes an information to log. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="objectId"> Identifier for the object.</param>
        /// <param name="logArea">  The log area.</param>
        /// <param name="message">  The message.</param>
        ///-------------------------------------------------------------------------------------------------

        internal void writeInfoToLog(int objectId, string logArea, string message)
        {
            if (_logger != null) this._logger.Write(Rebex.LogLevel.Info, _logger.GetType(), objectId, logArea, message);

        }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Writes an error to log. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="objectId"> Identifier for the object.</param>
        /// <param name="logArea">  The log area.</param>
        /// <param name="message">  The message.</param>
        ///-------------------------------------------------------------------------------------------------

        internal void writeErrorToLog(int objectId, string logArea, string message)
        {
            if (_logger != null) this._logger.Write(Rebex.LogLevel.Error, _logger.GetType(), objectId, logArea, message);

        }

     

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Resolve condition. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="TeLConditionOutOfRangeException"> Thrown when a Te L Condition Out Of Range
        ///                                                    error condition occurs.</exception>
        ///
        /// <param name="condition">    The condition.</param>
        ///
        /// <returns>   True if it succeeds, false if it fails. </returns>
        ///-------------------------------------------------------------------------------------------------

        private bool ResolveCondition(TelEnvyXmlLib.Conditions.ConditionBase condition)
        {
            TelEnvyXmlLib.Conditions.LogicalCondition lcondition = condition as TelEnvyXmlLib.Conditions.LogicalCondition;
            TelEnvyXmlLib.Conditions.FinalCondition fcondition = condition as TelEnvyXmlLib.Conditions.FinalCondition;
            switch (condition.ConditionType)
            {
                case IfConditionType.Not:
                    return !ResolveCondition(lcondition.ChildConditions[0]);

                case IfConditionType.And:
                    foreach (TelEnvyXmlLib.Conditions.ConditionBase child in lcondition.ChildConditions)
                    {
                        if (!ResolveCondition(child))
                            return false;
                    }
                    return true;

                case IfConditionType.Or:
                    foreach (TelEnvyXmlLib.Conditions.ConditionBase child in lcondition.ChildConditions)
                    {
                        if (ResolveCondition(child))
                            return true;
                    }
                    return false;

                case IfConditionType.EmptyIfCondition:
                    return fcondition.ConditionNodes.Count > 0;

                case IfConditionType.DataWithinRegion:
                    TelEnvyXmlLib.Conditions.DataWithinRegionCondition dwrCondition = condition as TelEnvyXmlLib.Conditions.DataWithinRegionCondition;
                    return IsDataWithinRegion(dwrCondition.Pattern, dwrCondition.Column, dwrCondition.Row, dwrCondition.Width, dwrCondition.Height);

                case IfConditionType.DataBeforeCursorPosition:
                    DataBeforeCursorPosition dbfCondition = condition as DataBeforeCursorPosition;
                    return IsDataWithinRegion(dbfCondition.Pattern, 0, _helper.Terminal.Screen.CursorTop, _helper.Terminal.Screen.CursorLeft, 1);

                case IfConditionType.CursorAtPosition:
                case IfConditionType.CursorWithinRegion:
                case IfConditionType.DataAtCursorPosition:
                    throw new NotImplementedException();

                default:
                    throw new TelEnvyXmlLib.Exceptions.TeLConditionOutOfRangeException(string.Format("ConditionType [{0}] out of range.", condition.ConditionType));
            }
        }

     

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Query if this TeLSession is data within region. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="pattern">  Specifies the pattern.</param>
        /// <param name="column">   The column.</param>
        /// <param name="row">      The row.</param>
        /// <param name="width">    The width.</param>
        /// <param name="height">   The height.</param>
        ///
        /// <returns>   True if data within region, false if not. </returns>
        ///-------------------------------------------------------------------------------------------------

        private bool IsDataWithinRegion(string pattern, int column, int row, int width, int height)
        {
            bool result = _helper.TestRegion(pattern, column, row, width, height);
            Save();
            return result;
        }

        #endregion



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Grab lines. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="TeLOutputBufferOverFlowException"> Thrown when a Te L Output Buffer Over
        ///                                                     Flow error condition occurs.</exception>
        ///
        /// <param name="column">   The column.</param>
        /// <param name="row">      The row.</param>
        /// <param name="width">    The width.</param>
        /// <param name="height">   The height.</param>
        ///
        /// <returns>   A string[]. </returns>
        ///-------------------------------------------------------------------------------------------------

        private string[] GrabLines(int column, int row, int width, int height)
        {
            int buffersize = _helper.Terminal.Screen.Columns;
            if ((column + width) > buffersize) throw new TelEnvyXmlLib.Exceptions.TeLOutputBufferOverFlowException(string.Format("GrabLines: \n TeXOutputBufferOverFlow Exception\nScreenSize is [{0}], attemped scrap start offset at [{1}] of [{2}] length.", buffersize, column, width));

            return _helper.Terminal.Screen.GetRegionText(column, row, width, height);
        }

       

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Grab line. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="TeLOutputBufferOverFlowException"> Thrown when a Te L Output Buffer Over
        ///                                                     Flow error condition occurs.</exception>
        ///
        /// <param name="column">   The column.</param>
        /// <param name="row">      The row.</param>
        /// <param name="width">    The width.</param>
        ///
        /// <returns>   A string. </returns>
        ///-------------------------------------------------------------------------------------------------

        private string GrabLine(int column, int row, int width)
        {
            int buffersize = _helper.Terminal.Screen.Columns;
            if ((column + width) > buffersize) throw new TelEnvyXmlLib.Exceptions.TeLOutputBufferOverFlowException(string.Format("GrabLine: \n TeXOutputBufferOverFlow Exception\nScreenSize is [{0}], attemped scrap start offset at [{1}] of [{2}] length.", buffersize, column, width));

            return _helper.Terminal.Screen.GetRegionText(column, row, width, 1)[0];
        }





        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Expects. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="pattern">  Specifies the pattern.</param>
        /// <param name="timeout">  The timeout.</param>
        ///
        /// <returns>   A string. </returns>
        ///-------------------------------------------------------------------------------------------------

        private string Expect(string pattern, int? timeout)
        {
            bool result = _helper.Expect(pattern, timeout ?? _helper.sendDataWaitForDataTimeout);
            Save();
            StaticLogger.LogTrace(_moduleName, string.Format("Host DataIn:{0}", _helper.ReceivedData));
            //if (!result)
            //	throw new TelEnvyXmlLib.Exceptions.TeLNullResultException(string.Format("Expect {0}, receive buffer:\n{1}", pattern, _helper.ReceivedData));
            return _helper.ReceivedData;
        }


        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Wait for data whole screen. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="TeLWaitDataRegionTimeOutException"> Thrown when a Te L Wait Data Region Time
        ///                                                      Out error condition occurs.</exception>
        ///
        /// <param name="pattern">  Specifies the pattern.</param>
        /// <param name="timeout">  The timeout.</param>
        ///-------------------------------------------------------------------------------------------------

        private void WaitForDataWholeScreen(string pattern, int? timeout)
        {
            bool result = _helper.WaitForData(pattern, timeout ?? _helper.sendDataWaitForDataTimeout);
            Save();
            if (!result)
                throw new TelEnvyXmlLib.Exceptions.TeLWaitDataRegionTimeOutException(string.Format("WaitForData {0}, receive buffer:\n{1}", pattern, _helper.ReceivedData));
        }

  

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Wait for data one row. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="TeLWaitDataRegionTimeOutException"> Thrown when a Te L Wait Data Region Time
        ///                                                      Out error condition occurs.</exception>
        ///
        /// <param name="pattern">  Specifies the pattern.</param>
        /// <param name="row">      The row.</param>
        /// <param name="timeout">  The timeout.</param>
        ///-------------------------------------------------------------------------------------------------

        private void WaitForDataOneRow(string pattern, int row, int? timeout)
        {
            bool result = _helper.WaitForDataOnRow(pattern, row, timeout ?? _helper.sendDataWaitForDataTimeout);
            Save();
            if (!result)
                throw new TelEnvyXmlLib.Exceptions.TeLWaitDataRegionTimeOutException(string.Format("WaitForData {0}, receive buffer:\n{1}", pattern, _helper.ReceivedData));
        }

     

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Wait for data region. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="TeLWaitDataRegionTimeOutException"> Thrown when a Te L Wait Data Region Time
        ///                                                      Out error condition occurs.</exception>
        ///
        /// <param name="pattern">  Specifies the pattern.</param>
        /// <param name="column">   The column.</param>
        /// <param name="row">      The row.</param>
        /// <param name="width">    The width.</param>
        /// <param name="height">   The height.</param>
        /// <param name="timeout">  The timeout.</param>
        ///-------------------------------------------------------------------------------------------------

        private void WaitForDataRegion(string pattern, int column, int row, int width, int height, int? timeout)
        {
            bool result = _helper.WaitForData(pattern, column, row, width, height, timeout ?? _helper.sendDataWaitForDataTimeout);
            Save();
            if (!result)
                throw new TelEnvyXmlLib.Exceptions.TeLWaitDataRegionTimeOutException(string.Format("WaitForData {0}, receive buffer:\n{1}", pattern, _helper.ReceivedData));
        }

    

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Wait for cursor. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="Exception">    Thrown when an exception error condition occurs.</exception>
        ///
        /// <param name="column">   The column.</param>
        /// <param name="row">      The row.</param>
        /// <param name="timeout">  The timeout.</param>
        ///-------------------------------------------------------------------------------------------------

        private void WaitForCursor(int column, int row, int? timeout)
        {
            bool result = _helper.WaitForCursor(column, row, timeout ?? _helper.sendDataWaitForDataTimeout);
            Save();
            if (!result)
                throw new Exception(string.Format("WaitForCursor Column Row {0} Column {1}, receive buffer:\n{2}", row, column, _helper.ReceivedData));
        }



     

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Sends a data. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="cmdText">  The command text.</param>
        ///-------------------------------------------------------------------------------------------------

        private void SendData(string cmdText)
        {
            _helper.SendToServer(cmdText);
            _helper.Process(Helper.sendDataWaitForDataTimeout);
            Save();
        }

      

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Sends a f. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="TeLSpecialKeyNotSupportedException"> Thrown when a Te L Special Key Not
        ///                                                       Supported error condition occurs.</exception>
        ///
        /// <param name="number">   Number of.</param>
        ///-------------------------------------------------------------------------------------------------

        private void SendF(int number)
        {
            string sequence;
            switch (number)
            {
                case 6: sequence = "17~"; break;
                case 7: sequence = "18~"; break;
                case 8: sequence = "19~"; break;
                case 9: sequence = "20~"; break;
                case 10: sequence = "21~"; break;
                case 11: sequence = "22~"; break;
                case 12: sequence = "23~"; break;
                default: throw new TelEnvyXmlLib.Exceptions.TeLSpecialKeyNotSupportedException(string.Format("F{0} is unsupported.", number));
            }
            SendData(Csi + sequence);
        }

        /*
		 * 
		Key 	Numeric 	ANSI Mode	    Numeric 	VT52 Mode
				Application 		        Application 
		0	    0	        Ss3p 	        0	        Esc?p 
		1	    1	        Ss3q 	        1	        Esc?q 
		2	    2	        Ss3r 	        2	        Esc?r 
		3	    3	        Ss3s 	        3	        Esc?s 
		4	    4	        Ss3t 	        4	        Esc?t 
		5	    5	        Ss3u 	        5	        Esc?u 
		6	    6	        Ss3v 	        6	        Esc?v 
		7	    7	        Ss3w 	        7	        Esc?w 
		8	    8	        Ss3x 	        8	        Esc?x 
		9	    9	        Ss3y 	        9	        Esc?y 
		- 	(minus) 	    Ss3m 	        - 	        Esc?m 
		, 	(comma) 	    Ss3l 	        , 	        Esc?l 
		. 	(period) 	    Ss3n 	        . 	        Esc?n 
		Enter 	Cr or 	    Ss3M 	        Cr or 	    Esc?M 
				CrLf 		                CrLf 	
		PF1 	Ss3P 	    Ss3P 	        EscP 	    EscP 
		PF2 	Ss3Q 	    Ss3Q 	        EscQ 	    EscQ 
		PF3 	Ss3R 	    Ss3R 	        EscR 	    EscR 
		PF4 	Ss3S 	    Ss3S 	        EscS 	    EscS 
		 * 
		 */

      

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Sends a pf. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="TeLSpecialKeyNotSupportedException"> Thrown when a Te L Special Key Not
        ///                                                       Supported error condition occurs.</exception>
        ///
        /// <param name="number">   Number of.</param>
        /// <param name="cmdText">  The command text.</param>
        ///-------------------------------------------------------------------------------------------------

        private void SendPF(int number, string cmdText)
        {
            string sequence;
            switch (number)
            {
                case 1: sequence = "P"; break;
                case 2: sequence = "Q"; break;
                case 3: sequence = "R"; break;
                case 4: sequence = "S"; break;
                default: throw new TelEnvyXmlLib.Exceptions.TeLSpecialKeyNotSupportedException(string.Format("PF{0} is unsupported.", number));
            }
            SendData(Escape + sequence + cmdText);
        }



      

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Saves this TeLSession. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///-------------------------------------------------------------------------------------------------

        private void Save()
        {
            if (!_debugEnabled)
                return;

            // process any available data which arrives within 3/4 second
            _helper.Process();

            // save terminal screen to PNG image
            //_helper.Terminal.Save(GetDebugPath(), TerminalCaptureFormat.Png, TerminalCaptureOptions.DoNotHideCursor);
            //  _simpleLoggerWriter.Write(Rebex.LogLevel.Verbose, _simpleLoggerWriter.GetType(), 5000, "Processed", Helper.Terminal.Recorder.ToString());

        }

    

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets debug path. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="debugPath">    Full pathname of the debug file.</param>
        ///
        /// <returns>   The debug path. </returns>
        ///-------------------------------------------------------------------------------------------------

        private string GetDebugPath(string debugPath)
        {
            string baseDir = debugPath;
            if (settings == null) return GetPath(DefaultDebugPath, ".PNG");
            if (!Directory.Exists(baseDir))
                Directory.CreateDirectory(baseDir);
            // deprecated to a standard naming convention derived from GetPath
            //string fileName = string.Format("{0}{1}.png", Path.GetFileNameWithoutExtension(_fileToProcess), _counter++);
            //return Path.Combine(baseDir, fileName);

            return GetPath(settings.TeLDebugDirectory, ".PNG");
        }

      

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets log file name. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <returns>   The log file name. </returns>
        ///-------------------------------------------------------------------------------------------------

        public string GetLogFileName()
        {

            if (settings == null) return GetPath(DefaultLogPath, ".LOG");                   // use the program settings instead of default constants
            if (settings == null) return GetDebugPath(settings.TeLLogDirectory);
            return GetPath(settings.TeLLogDirectory, ".Log");
        }

   

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets XML processed path. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <returns>   The XML processed path. </returns>
        ///-------------------------------------------------------------------------------------------------

        private string GetXMLProcessedPath()
        {
            if (settings != null) return GetPath(settings.TeLOutputDirectory, ".AXL");
            return GetPath(DefaultLogPath, ".AXL");
        }

      

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets record path. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <returns>   The record path. </returns>
        ///-------------------------------------------------------------------------------------------------

        private string GetRecordPath()
        {
            //return GetPath(DefaultRecordPath, ".ans");                // use the program settings instead of default constants 
            if (settings == null) return GetDebugPath(DefaultRecordPath);
            return GetPath(settings.TeLRecordingDirectory, ".Ans");
        }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets a path. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="baseDir">      The base dir.</param>
        /// <param name="extension">    The extension.</param>
        ///
        /// <returns>   The path. </returns>
        ///-------------------------------------------------------------------------------------------------

        private string GetPath(string baseDir, string extension)
        {
            if (!Directory.Exists(baseDir))
                Directory.CreateDirectory(baseDir);

            string fileName = Path.GetFileNameWithoutExtension(string.Format("{0}_TelEnvy_{1}", _moduleName, TransactionGuid.ToString()));
            string path = string.Format("{0}{1}{2}", baseDir, fileName, extension);



            //while (File.Exists(path))
            //{
            switch (LogOpt)
            {
                case EnumLoggingOptions.GUID:
                    {
                        if (extension.Contains(".PNG"))
                        {
                            path = string.Format("{0}{1}_{2}_{3}", baseDir, fileName, pngCounter++, extension);
                        }
                        else
                        {
                            path = string.Format("{0}{1}{2}", baseDir, fileName, extension);

                        }
                    }
                    break;
                case EnumLoggingOptions.LongTimeStamp:
                    {
                        if (extension.Contains(".PNG"))
                        {
                            path = Path.Combine(baseDir, string.Format("{0}_{1}_{2}{3}", fileName, TransactionTimestamp.ToString("yyyyMMddHHmmss"), pngCounter++, extension));
                        }
                        else
                        {
                            path = Path.Combine(baseDir, string.Format("{0}_{1}{2}", fileName, TransactionTimestamp.ToString("yyyyMMddHHmmss"), extension));

                        }
                    }
                    break;
                case EnumLoggingOptions.DailyIncrementer:
                    {
                        string tmppath = string.Format("{0}_{1}*.*", fileName, DateTime.Today.ToString("yyyyMMddHHmmss"));
                        var files = Directory.EnumerateFiles(baseDir, tmppath, SearchOption.AllDirectories);


                        //foreach (var item in files)
                        //{
                        //    bExists = true;
                        //}
                        // reset the counter each day.
                        // if (bExists)
                        {
                            Thread.Sleep(5);

                            if (extension.Contains(".PNG"))
                            {
                                path = Path.Combine(baseDir, string.Format("{0}_{1}_{2}_{3}{4}", fileName, DateTime.Now.ToString("yyyyMMddHHmmss"), Convert.ToString(debugIncrementing), pngCounter++, extension));
                                return path;
                            }
                            if (extension.ToUpper().Contains(".LOG"))
                            {
                                path = Path.Combine(baseDir, string.Format("{0}_{1}_{2}_{3}{4}", fileName, DateTime.Now.ToString("yyyyMMddHHmmss"), Convert.ToString(logIncrementing), pngCounter++, extension));
                                TelEnvyXmlLib.EventArgs.TelLogWriterEventArg fileNameChanged = new TelLogWriterEventArg(path);
                                OnChangeLogFileName(this, fileNameChanged);
                                return path;
                            }
                            if (extension.ToUpper().Contains(".ANS"))
                            {
                                path = Path.Combine(baseDir, string.Format("{0}_{1}_{2}{3}", fileName, DateTime.Now.ToString("yyyyMMddHHmmss"), Convert.ToString(recordIncrementing), extension));
                                return path;
                            }
                        }

                        //path = Path.Combine(baseDir, string.Format("{0}_{1}_{2}{3}", fileName, DateTime.Today.ToString("yyyyMMddHHmmss"), Convert.ToString(recordIncrementing++), extension));
                        //return path;

                    }
                    break;
            }

            return path;
        }



        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Gets path and rename. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="Exception">    Thrown when an exception error condition occurs.</exception>
        ///
        /// <param name="baseDir">      The base dir.</param>
        /// <param name="extension">    The extension.</param>
        ///
        /// <returns>   The path and rename. </returns>
        ///-------------------------------------------------------------------------------------------------

        internal string GetPathAndRename(string baseDir, string extension)
        {
            if (!Directory.Exists(baseDir))
                Directory.CreateDirectory(baseDir);

            string fileName = Path.GetFileNameWithoutExtension(_fileToProcess);
            string path = Path.Combine(baseDir, fileName + extension);

            int i = 0;
            while (File.Exists(path))
            {
                path = Path.Combine(baseDir, string.Format("{0}_{1}{2}", fileName, i++, extension));
            }
            try
            {
                this._logger.Write(Rebex.LogLevel.Info, _logger.GetType(), 1099, "Processed", string.Format("Preparing to rename {0} file.", _fileToProcess));
                System.IO.FileInfo fInfo = new FileInfo(_fileToProcess);
                this._logger.Write(Rebex.LogLevel.Info, _logger.GetType(), 1099, "Processed", string.Format("to {0} file.", path));
                fInfo.CopyTo(path);
                fInfo.Delete();
                this._logger.Write(Rebex.LogLevel.Info, _logger.GetType(), 1099, "Processed", string.Format("Clean-up of {0} file.", _fileToProcess));
                return path;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

            }
        }

     

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Disconnects this TeLSession. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///-------------------------------------------------------------------------------------------------

        void Disconnect()
        {
            LogTrace(9100, "Disconnect", "Session Complete");
        }

        

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   Sets receive data wait for data timeout. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="_ReceiveDataWaitForDataTimeOut">   The receive data wait for data time out.</param>
        ///-------------------------------------------------------------------------------------------------

        public void SetReceiveDataWaitForDataTimeout(int _ReceiveDataWaitForDataTimeOut)
        {
            this.receiveDataWaitForDataTimeout = _ReceiveDataWaitForDataTimeOut;
        }

    }
}