// ***********************************************************************
// Assembly         : TelEnvyXmlLib
// Author           : Timothy Peer
// Created          : 03-01-2018
//
// Last Modified By : Timothy Peer
// Last Modified On : 05-27-2018
// ***********************************************************************
// <copyright file="Extensions.cs" company="eNVy Systems, Inc.">
//     Copyright © eNVy Systems, Inc. 2011
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using TelEnvyXmlLib.Exceptions;
using System.Reflection;
using System.Collections;
using TelEnvyXmlLib.Helper;
using System.Text.RegularExpressions;
using System.Xml.Linq;
using Newtonsoft.Json;

namespace TelEnvyXmlLib.ExtensionMethods
{
    #region Documentation
    /// Class Extensions.
    ///
    /// \author Timothy Peer, eNVy Systems Inc.
    /// \date   6/26/2019
    ///
    /// ### remarks
    /// <p>Conversion Classes</p>s Extension             Description
    /// ---------------       -------------------------
    /// WriteAndResetPosition Ability to update a Memory Stream without changing position of the
    /// stream. (e.g.) stream.WriteAndResetPosition(data, 0, 20);
    /// RevertXMLMetacharacter   replace less than and greater than keys with the xml equivalents
    /// ToJsonString          XML to Json string AsXmlString           XmlDocument to String
    /// AppendTimeStamp       Rename the file with a timestamp file extension ToXml
    /// object to XML String FromXml               String to Object XmlToJson             Xml String
    /// to Json XmlToJson             XmlDocument to Json ObjectToJson          Object to Json
    /// (default)
    /// ObjectToJson          Object to Json (with formatting)
    /// UTF8ByteArrayToString convert an UTF8 Byte Array to an UTF8 string. StringToUTF8ByteArray
    /// convert an UTF8 string to an UTF8 Byte Array. SerializeObject       Serialize a
    /// [Serializable] object of type T into an XML/UTF8 string. DeserializeObject     De-serialize
    /// an XML/UTF8 string into an object of type T. SerializeObjectUsingBinaryFormatter    De-
    /// serialize a BinaryFormatter-serialized string into an object of type T.
    /// DeserializeObjectUsingBinaryFormatter  De-serialize a BinaryFormatter-serialized string into
    /// an object of type T. SerializeToXML        Serialize a [Serializable] object of type T into
    /// an XML-formatted string using XmlSerializer DeserializeFromXML    De-serialize a
    /// [Serializable] object of type T into an XML-formatted string using XmlSerializer
    /// DecodeQueryParameters Decodes the query parameters. ToMsgString           errorMsg =
    /// msg.MessageId + ", " + msg.MessageType + ", " + msg.Message;
    #endregion

    ///-------------------------------------------------------------------------------------------------
    /// <summary>   An extensions. </summary>
    ///
    /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
    ///-------------------------------------------------------------------------------------------------

    public static class Extensions
    {
        /// <summary>
        /// Replaces the amp to metacharacter.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ReplaceAmpToMetacharacter
/*

Table. Here are the first 128 characters. Some of the characters are escaped on the ASCII column. Many of the characters are control characters, which are not widely used.
ASCII table:

Decimal   ASCII     Hex
0         control   00
1         control   01
2         control   02
3         control   03
4         control   04
5         control   05
6         control   06
7         control   07
8         control   08
9         \t        09
10        \n        0A
11        \v        0B
12        \f        0C
13        \r        0D
14        control   0E
15        control   0F
16        control   10
17        control   11
18        control   12
19        control   13
20        control   14
21        control   15
22        control   16
23        control   17
24        control   18
25        control   19
26        control   1A
27        control   1B
28        control   1C
29        control   1D
30        control   1E
31        control   1F
32        space     20
33        //        21
34        "         22
35        #         23
36        $         24
37        %         25
38        &         26
39        '         27
40        (         28
41        )         29
42        *         2A
43        +         2B
44        ,         2C
45        -         2D
46        .         2E
47        /         2F
48        0         30
49        1         31
50        2         32
51        3         33
52        4         34
53        5         35
54        6         36
55        7         37
56        8         38
57        9         39
58        :         3A
59        ;         3B
60        <         3C
61        =         3D
62        >         3E
63        ?         3F
64        @         40
65        A         41
66        B         42
67        C         43
68        D         44
69        E         45
70        F         46
71        G         47
72        H         48
73        I         49
74        J         4A
75        K         4B
76        L         4C
77        M         4D
78        .         4E
79        .         4F
80        .         50
81        .         51
82        .         52
83        .         53
84        .         54
85        .         55
86        .         56
87        .         57
88        .         58
89        .         59
90        Z         5A
91        [         5B
92        \         5C
93        ]         5D
94        ^         5E
95        _         5F
96        `         60
97        a         61
98        b         62
99        c         63
100       d         64
101       e         65
102       f         66
103       g         67
104       h         68
105       i         69
106       j         6A
107       k         6B
108       l         6C
109       m         6D
110       n         6E
111       o         6F
112       p         70
113       q         71
114       r         72
115       s         73
116       t         74
117       u         75
118       v         76
119       w         77
120       x         78
121       y         79
122       z         7A
123       {         7B
124       |         7C
125       }         7D
126       ~         7E
127       control   7F 
*/

#region Documentation
/// A char[] extension method that trim controls
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  bytes   The bytes to act on.
///
/// \returns    A string.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   A char[] extension method that trim controls. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="bytes">    The bytes to act on.</param>
///
/// <returns>   A string. </returns>
///-------------------------------------------------------------------------------------------------

public static string TrimControls(this char[] bytes )
{
   if (bytes == null)
       return null;
   char[] charsToTrim = { '1','2','3','4','5','6','7','8','9' };
   char[] result = new char[bytes.Length];


   // int resultIdx = 0;
    //for (int ii = 0; ii < bytes.Length; ii++)
    //{
    //    foreach (char item in charsToTrim)
    //    {
    //        if (bytes[ii] == item)
    //            result[resultIdx++] = bytes[ii];
    //    }
    //         
    //     if (ii == 17) Console.WriteLine("");
    //    TelEnvyXmlLib.Logging.Log.instance.Debug(ii.ToString());
    //}

    //return result.Take(resultIdx).ToArray();
    StringBuilder sbx = new StringBuilder(new string(bytes).Trim(charsToTrim));
    string tmp = sbx.ToString();
   return sbx.ToString();
}

#region Documentation
/// Writes the and reset position.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  stream  The stream.
/// \param  data    The data.
/// \param  offset  The offset.
/// \param  count   The count.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   A MemoryStream extension method that writes an and reset position. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="stream">   The stream to act on.</param>
/// <param name="data">     The data to act on.</param>
/// <param name="offset">   The offset.</param>
/// <param name="count">    Number of.</param>
///-------------------------------------------------------------------------------------------------

public static void WriteAndResetPosition(this MemoryStream stream, byte[] data, int offset, int count)
{
   stream.Write(data, offset, count);
   stream.Position -= count;
}
//--------------------------------------------------------------------------------

#region Documentation
/// Gets the value.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  xml         The XML.
/// \param  name        The name.
/// \param  NamedKey    The named key.
///
/// \returns    T.
///
/// ### exception   System.InvalidOperationException    .
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   An XmlDocument extension method that gets a value. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="xml">      The XML.</param>
/// <param name="name">     The name.</param>
/// <param name="NamedKey"> The named key.</param>
///
/// <returns>   The value. </returns>
///-------------------------------------------------------------------------------------------------

public static string GetValue(this XmlDocument xml, string name, string NamedKey)
{
   string keyValue = string.Empty;
   XmlNodeList xnList = xml.SelectNodes(name);
   foreach (XmlElement item in xnList)
   {
       if (item.Name.Contains(NamedKey))
       {
           keyValue = item.InnerText;
           StaticLogger.LogTrace("PZ_API_41",keyValue);
           break;
       }
   }
   return keyValue;
}

//--------------------------------------------------------------------------------

#region Documentation
/// Gets the attribute.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \exception  InvalidOperationException   .
///
/// \tparam T   .
/// \param  root            The root.
/// \param  name            The name.
/// \param  defaultValue    The default value.
///
/// \returns    T.
///
/// ### exception   System.InvalidOperationException    .
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   An XElement extension method that gets an attribute. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <exception cref="InvalidOperationException"> Thrown when the requested operation is invalid.</exception>
///
/// <typeparam name="T">    Generic type parameter.</typeparam>
/// <param name="root">         The root to act on.</param>
/// <param name="name">         The name.</param>
/// <param name="defaultValue"> The default value.</param>
///
/// <returns>   The attribute. </returns>
///-------------------------------------------------------------------------------------------------

public static T GetAttribute<T>(this XElement root, string name, T defaultValue)
{
   T value = defaultValue;
   string strValue = (string)root.Attributes(name).FirstOrDefault() ?? defaultValue.ToString();
   if (value is string)
   {
       value = (T)(object)strValue;
   }
   else
   {
       var tryParse = typeof(T).GetMethod("TryParse", new[] { typeof(string), typeof(T).MakeByRefType() });
       if (tryParse == null)
       {
           throw new InvalidOperationException();
       }
       var parameters = new object[] { strValue, value };
       if ((bool)tryParse.Invoke(null, parameters))
       {
           value = (T)parameters[1];
       }
   }
   return value;
}

#region Documentation
/// Replaces the amp to metacharacter.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  JsonString  The json string.
///
/// \returns    System.String.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   A string extension method that replace amp to metacharacter. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="JsonString">   The JsonString to act on.</param>
///
/// <returns>   A string. </returns>
///-------------------------------------------------------------------------------------------------

public static string ReplaceAmpToMetacharacter(this string JsonString)
{
   StringBuilder sbx = new StringBuilder(JsonString);
            sbx.Replace("&amp;", "&");
            sbx.Replace("&exclamation;", "!");
            sbx.Replace("&quot;", "\"");
            sbx.Replace("&apos;", "'");
            sbx.Replace("&add;", "+");
   return sbx.ToString();
}

        #region Documentation
        /// Replaces the amp to metacharacter.
        ///
        /// \author Timothy Peer, eNVy Systems Inc.
        /// \date   6/26/2019
        ///
        /// \param  JsonString  The json string.
        ///
        /// \returns    System.String.
        #endregion

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   A string extension method that revert XML metacharacter. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="JsonString">   The JsonString to act on.</param>
        ///
        /// <returns>   A string. </returns>
        ///-------------------------------------------------------------------------------------------------

        public static string RevertXMLMetacharacter(this string JsonString)
        {
            StringBuilder sbx = new StringBuilder(JsonString);
            sbx.Replace("&amp;", "&");
            sbx.Replace("&exclamation;", "!");
            sbx.Replace("&quot;", "\"");
            sbx.Replace("&apos;", "'");
            sbx.Replace("&add;", "+");
            return sbx.ToString();
        }

        #region Documentation
        /// A string extension method that transform XML metacharacter
        ///
        /// \author Timothy Peer, eNVy Systems Inc.
        /// \date   6/26/2019
        ///
        /// \param  XmlString   The XmlString to act on.
        ///
        /// \returns    A string.
        #endregion

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   A string extension method that transform XML metacharacter. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="XmlString">    The XmlString to act on.</param>
        ///
        /// <returns>   A string. </returns>
        ///-------------------------------------------------------------------------------------------------

        public static string TransformXMLMetacharacter(this string XmlString)
        {
            StringBuilder sbx = new StringBuilder(XmlString);

            sbx.Replace("&", "&amp;");
            sbx.Replace("!", "&exclamation;");
            sbx.Replace("\"", "&quot;");
            sbx.Replace("'", "&apos;");
            sbx.Replace("+", "&add;");

            return sbx.ToString();
        }

        #region Documentation
        /// To the json string.
        ///
        /// \author Timothy Peer, eNVy Systems Inc.
        /// \date   6/26/2019
        ///
        /// \exception  Exception   .
        ///
        /// \param  finalXmlStr The final XML string.
        ///
        /// \returns    System.String.
        ///
        /// ### exception   System.Exception    .
        #endregion

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   A string extension method that converts a finalXmlStr to a JSON string. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <exception cref="Exception">    Thrown when an exception error condition occurs.</exception>
        ///
        /// <param name="finalXmlStr">  The finalXmlStr to act on.</param>
        ///
        /// <returns>   FinalXmlStr as a string. </returns>
        ///-------------------------------------------------------------------------------------------------

        public static string ToJsonString(this string finalXmlStr)
{
   try
   {
       XmlDocument resultXmlDoc = new XmlDocument();

       resultXmlDoc.LoadXml(finalXmlStr);
       string jsonstr = JsonConvert.SerializeXmlNode(resultXmlDoc);
       return jsonstr;
   }
   catch (Exception e)
   {
       throw new Exception(e.Message + "from ToJsonString extension");

   }
}

        #region Documentation
        /// A TimeSpan extension method that converts a span to a readable string
        ///
        /// \author Timothy Peer, eNVy Systems Inc.
        /// \date   6/26/2019
        ///
        /// \param  span    The span to act on.
        ///
        /// \returns    Span as a string.
        #endregion

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   A TimeSpan extension method that converts a span to a readable string. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="span"> The span to act on.</param>
        ///
        /// <returns>   Span as a string. </returns>
        ///-------------------------------------------------------------------------------------------------

        public static string ToReadableString(this TimeSpan span)
        {

            string ddx = new DateTime(span.Ticks).ToString("HH:mm:ss.fff");
            return ddx;
        }

        #region Documentation
        /// Appends the time stamp to a file name.
        ///
        /// \author Timothy Peer, eNVy Systems Inc.
        /// \date   6/26/2019
        ///
        /// \param  fileName    Name of the file.
        ///
        /// \returns    [file name] as System.String .
        #endregion

        ///-------------------------------------------------------------------------------------------------
        /// <summary>   A string extension method that appends a time stamp. </summary>
        ///
        /// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
        ///
        /// <param name="fileName"> The fileName to act on.</param>
        ///
        /// <returns>   A string. </returns>
        ///-------------------------------------------------------------------------------------------------

        public static string AppendTimeStamp(this string fileName)
{
   return string.Concat(
       Path.GetFileNameWithoutExtension(fileName),
       DateTime.Now.ToString("yyyyMMddHHmmssfff"),
       Path.GetExtension(fileName)
       );
}

#region Documentation
/// To the MSG string.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  msg The MSG.
///
/// \returns    System.String.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   A MessageDetails_c extension method that converts a msg to a message string.
///             </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="msg">  The msg to act on.</param>
///
/// <returns>   Msg as a string. </returns>
///-------------------------------------------------------------------------------------------------

static public string ToMsgString(this MessageDetails_c msg)
{
   var errorMsg = string.Format("{0}, {1}, {2}", msg.MessageId, msg.MessageType, msg.Message);

   return errorMsg;
}

#region Documentation
/// Returns the XmlDocument as a string.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  xmlDoc  The XML document.
///
/// \returns    System.String.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   An XmlDocument extension method that converts an xmlDoc to an XML string. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="xmlDoc">   The xmlDoc to act on.</param>
///
/// <returns>   A string. </returns>
///-------------------------------------------------------------------------------------------------

public static string AsXmlString(this XmlDocument xmlDoc)
{
   try
   {
       using (StringWriter sw = new StringWriter())
       {
           using (XmlTextWriter tx = new XmlTextWriter(sw))
           {
               xmlDoc.WriteTo(tx);
               string strXmlText = sw.ToString();
               return strXmlText;
           }
       }
   }
   catch (Exception ex)
   {
       string exx = ex.Message;
       return string.Empty;
   }
   finally
   {

   }
}

#region Documentation
/// To the XML.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  obj The object.
///
/// \returns    System.String.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   An object extension method that converts an obj to an XML. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="obj">  The obj to act on.</param>
///
/// <returns>   Obj as a string. </returns>
///-------------------------------------------------------------------------------------------------

public static string ToXml(this object obj)
{
   try
   {
       XmlSerializer s = new XmlSerializer(obj.GetType());
       using (StringWriter writer = new StringWriter())
       {
           s.Serialize(writer, obj);
           return writer.ToString();
       }
   }
   catch (Exception ex)
   {
       string xxx = ex.Message;
       return string.Empty;
   }
   finally
   {

   }
}

#region Documentation
/// From String the Object&lt;T&gt;.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \tparam T   .
/// \param  data    The data.
///
/// \returns    T.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   A string extension method that initializes this Extensions from the given XML.
///             </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <typeparam name="T">    Generic type parameter.</typeparam>
/// <param name="data"> The data to act on.</param>
///
/// <returns>   A T. </returns>
///-------------------------------------------------------------------------------------------------

public static T FromXml<T>(this string data)
{
   XmlSerializer s = new XmlSerializer(typeof(T));
   using (StringReader reader = new StringReader(data))
   {
       object obj = s.Deserialize(reader);
       return (T)obj;
   }
}

#region Documentation
/// A Well-Formed and validated XML string to json.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  xml The XML.
///
/// \returns    System.String.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   An XmlDocument extension method that XML to JSON. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="xml">  The XML.</param>
///
/// <returns>   A string. </returns>
///-------------------------------------------------------------------------------------------------

public static string XmlToJSON(this string xml)
{
   XmlDocument doc = new XmlDocument();
   doc.LoadXml(xml);

   return XmlToJSON(doc);
}

#region Documentation
/// XML Document to String.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  xmlDoc  The XML document.
///
/// \returns    System.String.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   An XmlDocument extension method that XML to JSON. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="xmlDoc">   The xmlDoc to act on.</param>
///
/// <returns>   A string. </returns>
///-------------------------------------------------------------------------------------------------

public static string XmlToJSON(this XmlDocument xmlDoc)
{
   StringBuilder sbJSON = new StringBuilder();
   sbJSON.Append("{ ");
   XmlToJSONnode(sbJSON, xmlDoc.DocumentElement, true);
   sbJSON.Append("}");
   return sbJSON.ToString();
}

#region Documentation
/// From Object to json.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \exception  ObjectToJsonException   .
///
/// \param  value   The value.
///
/// \returns    The Json of any object.
///
/// ### exception   TelEnvyXmlLib.Exceptions.ObjectToJsonException  .
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   An object extension method that object to JSON. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <exception cref="ObjectToJsonException"> Thrown when an Object To JSON error condition occurs.</exception>
///
/// <param name="value">    The value to act on.</param>
///
/// <returns>   A string. </returns>
///-------------------------------------------------------------------------------------------------

public static string ObjectToJson(this object value)
{
   if (value == null) return null;

   try
   {
       string json = JsonConvert.SerializeObject(value);
       return json;
   }
   catch (Exception ex)
   {
       throw new ObjectToJsonException(value.ToString(), ex);

   }
}

#region Documentation
/// Object to json with formatting option.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \exception  ObjectToJsonException   .
///
/// \param  value       The value.
/// \param  formatting  (Optional) The formatting.
///
/// \returns    System.String.
///
/// ### exception   TelEnvyXmlLib.Exceptions.ObjectToJsonException  .
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   An object extension method that object to JSON. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <exception cref="ObjectToJsonException"> Thrown when an Object To JSON error condition occurs.</exception>
///
/// <param name="value">        The value to act on.</param>
/// <param name="formatting">   (Optional) The formatting.</param>
///
/// <returns>   A string. </returns>
///-------------------------------------------------------------------------------------------------

public static string ObjectToJson(this object value, Newtonsoft.Json.Formatting formatting = Newtonsoft.Json.Formatting.None)
{
   if (value == null) return null;
   try
   {
       return JsonConvert.SerializeObject(value, formatting);
   }
   catch (Exception ex)
   {
       //log exception but dont throw one
       throw new ObjectToJsonException(value.ToString(), ex);
   }

}

#region Documentation
/// Internal utility method to convert an UTF8 Byte Array to an UTF8 string.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  characters  The characters.
///
/// \returns    System.String.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   UTF 8 byte array to string. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="characters">   The characters.</param>
///
/// <returns>   A string. </returns>
///-------------------------------------------------------------------------------------------------

public static string UTF8ByteArrayToString(byte[] characters)
{
   return new UTF8Encoding().GetString(characters);
}

#region Documentation
/// Internal utility method to convert an UTF8 string to an UTF8 Byte Array.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  xml The XML.
///
/// \returns    System.Byte[].
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   String to UTF 8 byte array. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="xml">  The XML.</param>
///
/// <returns>   A byte[]. </returns>
///-------------------------------------------------------------------------------------------------

private static byte[] StringToUTF8ByteArray(string xml)
{
   return new UTF8Encoding().GetBytes(xml);
}

#region Documentation
/// Serialize a [Serializable] object of type T into an XML/UTF8 string.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \tparam T   .
/// \param  item    The item.
///
/// \returns    System.String.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   A T extension method that serialize object. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <typeparam name="T">    Generic type parameter.</typeparam>
/// <param name="item"> The item to act on.</param>
///
/// <returns>   A string. </returns>
///-------------------------------------------------------------------------------------------------

public static string SerializeObject<T>(this T item)
{
   try
   {
       using (MemoryStream stream = new MemoryStream())
       {
           using (XmlTextWriter xml = new XmlTextWriter(stream, new UTF8Encoding(false)))
           {
               XmlSerializer xs = new XmlSerializer(typeof(T));
               xs.Serialize(xml, item);
               return UTF8ByteArrayToString(((MemoryStream)xml.BaseStream).ToArray());
           }
       }
   }
   catch (Exception)
   {
       return string.Empty;
   }
}

#region Documentation
/// De-serialize an XML/UTF8 string into an object of type T.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \tparam T   .
/// \param  xml The XML.
///
/// \returns    T.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   Deserialize object. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <typeparam name="T">    Generic type parameter.</typeparam>
/// <param name="xml">  The XML.</param>
///
/// <returns>   A T. </returns>
///-------------------------------------------------------------------------------------------------

public static T DeserializeObject<T>(string xml)
{
   using (MemoryStream stream = new MemoryStream(StringToUTF8ByteArray(xml)))
   using (new XmlTextWriter(stream, new UTF8Encoding(false)))
   {
       return (T)new XmlSerializer(typeof(T)).Deserialize(stream);
   }
}

#region Documentation
/// Serialize an object T using BinaryFormatter.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \tparam T   .
/// \param  item    The item.
///
/// \returns    System.String.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   A T extension method that serialize object using binary formatter. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <typeparam name="T">    Generic type parameter.</typeparam>
/// <param name="item"> The item to act on.</param>
///
/// <returns>   A string. </returns>
///-------------------------------------------------------------------------------------------------

public static string SerializeObjectUsingBinaryFormatter<T>(this T item)
{
   BinaryFormatter serializer = new BinaryFormatter();
   using (MemoryStream ms = new MemoryStream())
   {
       serializer.Serialize(ms, item);
       return UTF8ByteArrayToString(ms.ToArray());
   }
}

#region Documentation
/// De-serialize a BinaryFormatter-serialized string into an object of type T.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \tparam T   .
/// \param  str The string.
///
/// \returns    T.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   Deserialize object using binary formatter. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <typeparam name="T">    Generic type parameter.</typeparam>
/// <param name="str">  The string.</param>
///
/// <returns>   A T. </returns>
///-------------------------------------------------------------------------------------------------

public static T DeserializeObjectUsingBinaryFormatter<T>(string str)
{
   BinaryFormatter serializer = new BinaryFormatter();
   using (MemoryStream ms = new MemoryStream(StringToUTF8ByteArray(str)))
   {
       return (T)serializer.Deserialize(ms);
   }
}

#region Documentation
/// Serialize a [Serializable] object of type T into an XML-formatted string using XmlSerializer
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \exception  SerializeToXMLException .
///
/// \tparam T   .
/// \param  value   any T object.
///
/// \returns    an XML-formatted string.
///
/// ### exception   TelEnvyXmlLib.Exceptions.SerializeToXMLException    .
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   A T extension method that serialize to XML. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <exception cref="SerializeToXMLException"> Thrown when a Serialize To XML error condition
///                                            occurs.</exception>
///
/// <typeparam name="T">    Generic type parameter.</typeparam>
/// <param name="value">    The value to act on.</param>
///
/// <returns>   A string. </returns>
///-------------------------------------------------------------------------------------------------

public static string SerializeToXML<T>(this T value)
{
   if (value == null)
   {
       return string.Empty;
   }
   try
   {
       var stringWriter = new StringWriter();
       using (var writer = XmlWriter.Create(stringWriter))
       {
           new XmlSerializer(typeof(T)).Serialize(writer, value);
           return stringWriter.ToString();
       }
   }
   catch (Exception ex)
   {
       throw new SerializeToXMLException(value.ToString(), ex);
   }
}

#region Documentation
/// De-serialize a [Serializable] object of type T into an XML-formatted string using
/// XmlSerializer
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \exception  NotSupportedException       ERROR: input string cannot be null.
/// \exception  DeserializeFromXMLException .
///
/// \tparam T   .
/// \param  xml any T object.
///
/// \returns    an XML-formatted string.
///
/// ### exception   TelEnvyXmlLib.Exceptions.DeserializeFromXMLException    ERROR: input string
///                                                                         cannot be null.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   Deserialize from XML. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <exception cref="NotSupportedException">       Thrown when the requested operation is not
///                                                supported.</exception>
/// <exception cref="DeserializeFromXMLException"> Thrown when a Deserialize From XML error
///                                                condition occurs.</exception>
///
/// <typeparam name="T">    Generic type parameter.</typeparam>
/// <param name="xml">  The XML.</param>
///
/// <returns>   A T. </returns>
///-------------------------------------------------------------------------------------------------

public static T DeserializeFromXML<T>(string xml)
{
   if (string.IsNullOrEmpty(xml)) throw new NotSupportedException("ERROR: input string cannot be null.");
   try
   {
       var stringReader = new StringReader(xml);
       using (var reader = XmlReader.Create(stringReader))
       {
           return (T)new XmlSerializer(typeof(T)).Deserialize(reader);
       }
   }
   catch (Exception ex)
   {
       throw new DeserializeFromXMLException(xml, ex);
   }
}




//  XmlToJSONnode:  Output an XmlElement, possibly as part of a higher array

#region Documentation
/// XMLs to jso nnode.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  sbJSON          The sb json.
/// \param  node            The node.
/// \param  showNodeName    if set to <c>true</c> [show node name].
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   XML to jso nnode. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="sbJSON">       The JSON.</param>
/// <param name="node">         Element describing the node.</param>
/// <param name="showNodeName"> True to show, false to hide the node name.</param>
///-------------------------------------------------------------------------------------------------

private static void XmlToJSONnode(StringBuilder sbJSON, XmlElement node, bool showNodeName)
{
   if (showNodeName)
       sbJSON.AppendFormat("\"{0}\": ", SafeJSON(node.Name));
   sbJSON.Append("{");
   // Build a sorted list of key-value pairs
   //  where   key is case-sensitive nodeName
   //          value is an ArrayList of string or XmlElement
   //  so that we know whether the nodeName is an array or not.
   SortedList<string, object> childNodeNames = new SortedList<string, object>();

   //  Add in all node attributes
   if (node.Attributes != null)
       foreach (XmlAttribute attr in node.Attributes)
           StoreChildNode(childNodeNames, attr.Name, attr.InnerText);

   //  Add in all nodes
   foreach (XmlNode cnode in node.ChildNodes)
   {
       if (cnode is XmlText)
           StoreChildNode(childNodeNames, "value", cnode.InnerText);
       else if (cnode is XmlElement)
           StoreChildNode(childNodeNames, cnode.Name, cnode);
   }

   // Now output all stored info
   foreach (string childname in childNodeNames.Keys)
   {
       List<object> alChild = (List<object>)childNodeNames[childname];
       if (alChild.Count == 1)
           OutputNode(childname, alChild[0], sbJSON, true);
       else
       {
           sbJSON.AppendFormat(" \"{0}\": [ ", SafeJSON(childname));
           foreach (object Child in alChild)
               OutputNode(childname, Child, sbJSON, false);
           sbJSON.Remove(sbJSON.Length - 2, 2);
           sbJSON.Append(" ], ");
       }
   }
   sbJSON.Remove(sbJSON.Length - 2, 2);
   sbJSON.Append(" }");
}

//  StoreChildNode: Store data associated with each nodeName
//                  so that we know whether the nodeName is an array or not.

#region Documentation
/// Stores the child node.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  childNodeNames  The child node names.
/// \param  nodeName        Name of the node.
/// \param  nodeValue       The node value.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   Stores child node. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="childNodeNames">   List of names of the child nodes.</param>
/// <param name="nodeName">         Name of the node.</param>
/// <param name="nodeValue">        The node value.</param>
///-------------------------------------------------------------------------------------------------

private static void StoreChildNode(SortedList<string, object> childNodeNames, string nodeName, object nodeValue)
{
   // Pre-process contraction of XmlElement-s
   if (nodeValue is XmlElement)
   {
       // Convert  <aa></aa> into "aa":null
       //          <aa>xx</aa> into "aa":"xx"
       XmlNode cnode = (XmlNode)nodeValue;
       if (cnode.Attributes.Count == 0)
       {
           XmlNodeList children = cnode.ChildNodes;
           if (children.Count == 0)
               nodeValue = null;
           else if (children.Count == 1 && (children[0] is XmlText))
               nodeValue = ((XmlText)(children[0])).InnerText;
       }
   }
   // Add nodeValue to ArrayList associated with each nodeName
   // If nodeName doesn't exist then add it
   List<object> ValuesAL;

   if (childNodeNames.ContainsKey(nodeName))
   {
       ValuesAL = (List<object>)childNodeNames[nodeName];
   }
   else
   {
       ValuesAL = new List<object>();
       childNodeNames[nodeName] = ValuesAL;
   }
   ValuesAL.Add(nodeValue);
}

#region Documentation
/// Outputs the node.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  childname       The childname.
/// \param  alChild         The al child.
/// \param  sbJSON          The sb json.
/// \param  showNodeName    if set to <c>true</c> [show node name].
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   Output node. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="childname">    The childname.</param>
/// <param name="alChild">      The al child.</param>
/// <param name="sbJSON">       The JSON.</param>
/// <param name="showNodeName"> True to show, false to hide the node name.</param>
///-------------------------------------------------------------------------------------------------

private static void OutputNode(string childname, object alChild, StringBuilder sbJSON, bool showNodeName)
{
   if (alChild == null)
   {
       if (showNodeName)
           sbJSON.AppendFormat("\"{0}\": ", SafeJSON(childname));
       sbJSON.Append("null");
   }
   else if (alChild is string)
   {
       if (showNodeName)
           sbJSON.AppendFormat("\"{0}\": ", SafeJSON(childname));
       string sChild = (string)alChild;
       sChild = sChild.Trim();
       sbJSON.AppendFormat("\"{0}\"", SafeJSON(sChild));
   }
   else
       XmlToJSONnode(sbJSON, (XmlElement)alChild, showNodeName);
   sbJSON.Append(", ");
}

// Make a string safe for JSON

#region Documentation
/// Safes the json.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  sIn The s in.
///
/// \returns    System.String.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   Safe JSON. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="sIn">  The in.</param>
///
/// <returns>   A string. </returns>
///-------------------------------------------------------------------------------------------------

private static string SafeJSON(string sIn)
{
   StringBuilder sbOut = new StringBuilder(sIn.Length);
   foreach (char ch in sIn)
   {
       if (Char.IsControl(ch) || ch == '\'')
       {
           int ich = (int)ch;
           sbOut.Append(@"\u" + ich.ToString("x4"));
           continue;
       }
       else if (ch == '\"' || ch == '\\' || ch == '/')
       {
           sbOut.Append('\\');
       }
       sbOut.Append(ch);
   }
   return sbOut.ToString();
}

#region Documentation
/// Copies to.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \tparam TEntity The type of the t entity.
/// \param  OriginalEntity  The original entity.
/// \param  EntityToMergeOn The entity to merge on.
///
/// \returns    TEntity.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   A TEntity extension method that copies to. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <typeparam name="TEntity">  Type of the entity.</typeparam>
/// <param name="OriginalEntity">   The original entity.</param>
/// <param name="EntityToMergeOn">  The entity to merge on.</param>
///
/// <returns>   A TEntity. </returns>
///-------------------------------------------------------------------------------------------------

public static TEntity CopyTo<TEntity>(this TEntity OriginalEntity, TEntity EntityToMergeOn)
{
   PropertyInfo[] oProperties = OriginalEntity.GetType().GetProperties();

   foreach (PropertyInfo CurrentProperty in oProperties.Where(p => p.CanWrite))
   {
       var originalValue = CurrentProperty.GetValue(EntityToMergeOn);

       if (originalValue != null)
       {
           IListLogic<TEntity>(OriginalEntity, CurrentProperty, originalValue);
       }
       else
       {
           var value = CurrentProperty.GetValue(OriginalEntity, null);
           CurrentProperty.SetValue(EntityToMergeOn, value, null);
       }
   }

   return OriginalEntity;
}

#region Documentation
/// is the list logic.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \tparam TEntity The type of the t entity.
/// \param  OriginalEntity  The original entity.
/// \param  CurrentProperty The current property.
/// \param  originalValue   The original value.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   List logic. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <typeparam name="TEntity">  Type of the entity.</typeparam>
/// <param name="OriginalEntity">   The original entity.</param>
/// <param name="CurrentProperty">  The current property.</param>
/// <param name="originalValue">    The original value.</param>
///-------------------------------------------------------------------------------------------------

private static void IListLogic<TEntity>(TEntity OriginalEntity, PropertyInfo CurrentProperty, object originalValue)
{
   if (originalValue is IList)
   {
       var tempList = (originalValue as IList);
       var existingList = CurrentProperty.GetValue(OriginalEntity) as IList;

       foreach (var item in tempList)
       {
           existingList.Add(item);
       }

   }
}

#region Documentation
/// Decodes the query parameters.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \exception  ArgumentNullException   uri.
///
/// \param  uri The URI.
///
/// \returns    Dictionary&lt;System.String, System.String&gt;.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   An URI extension method that decodes a query parameters. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <exception cref="ArgumentNullException"> Thrown when one or more required arguments are null.</exception>
///
/// <param name="uri">  The URI to act on.</param>
///
/// <returns>   A Dictionary&lt;string,string&gt; </returns>
///-------------------------------------------------------------------------------------------------

public static Dictionary<string, string> DecodeQueryParameters(this Uri uri)
{
   if (uri == null)
       throw new ArgumentNullException("uri");

   if (uri.Query.Length == 0)
       return new Dictionary<string, string>();

   return uri.Query.TrimStart('?')
                   .Split(new[] { '&', ';' }, StringSplitOptions.RemoveEmptyEntries)
                   .Select(parameter => parameter.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries))
                   .GroupBy(parts => parts[0],
                            parts => parts.Length > 2 ? string.Join("=", parts, 1, parts.Length - 1) : (parts.Length > 1 ? parts[1] : ""))
                   .ToDictionary(grouping => grouping.Key,
                                 grouping => string.Join(",", grouping));
}

#region Documentation
/// Trims the open VMS logoff.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  strText The string text.
///
/// \returns    System.String.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   A string extension method that trim open vms logoff. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="strText">  The strText to act on.</param>
///
/// <returns>   A string. </returns>
///-------------------------------------------------------------------------------------------------

public static string TrimOpenVMSLogoff(this string strText)
{
   string[] splitArray = null;
   try
   {
       splitArray = Regex.Split(strText, "[ ][ ][P][H][A][S][E][Z][E][R][O][ ][ ][ ][ ][l][o][g][g][e][d][ ][o][u][t][ ][a][t]");
   }
   catch (ArgumentException ex)
   {
       Console.WriteLine(ex.Message);
   }
   if (splitArray.Length == 2)
   {
       return splitArray[0];
   }
   return strText;

}

#region Documentation
/// Withins the data section.
///
/// \author Timothy Peer, eNVy Systems Inc.
/// \date   6/26/2019
///
/// \param  strText The string text.
///
/// \returns    System.String.
#endregion

///-------------------------------------------------------------------------------------------------
/// <summary>   A string extension method that within data section. </summary>
///
/// <remarks>   Timothy Peer, eNVy Systems Inc., 6/26/2019. </remarks>
///
/// <param name="strText">  The strText to act on.</param>
///
/// <returns>   A string. </returns>
///-------------------------------------------------------------------------------------------------

public static string WithinDataSection(this string strText)
{
   string tmpStringNotControls = strText.TrimOpenVMSLogoff().Replace("\r", string.Empty).Replace("\n", string.Empty).Replace("***END OF RESPONSE***",string.Empty);
   StringBuilder AddData = new StringBuilder();
   AddData.Append(tmpStringNotControls);
   return AddData.ToString();
}
}
}
